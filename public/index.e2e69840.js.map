{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-1cba84badefa0144.js","src/capabilities/board-buttons.js","src/capabilities/card-badges.js","src/capabilities/card-buttons.js","src/api/enums.js","node_modules/@parcel/runtime-js/lib/runtime-55e5ebecc04afa50.js","node_modules/@parcel/runtime-js/lib/runtime-237fb8d62ddb295a.js","node_modules/@parcel/runtime-js/lib/runtime-9b045f6875d19687.js","node_modules/@parcel/runtime-js/lib/runtime-975a9087b41bd714.js","node_modules/@parcel/runtime-js/lib/runtime-3a2c65592369123b.js","node_modules/@parcel/runtime-js/lib/runtime-dc6733200bf4e468.js","src/api/api.js","src/shared/capability-selector.js","src/capabilities/card-detail-badges.js","src/js/connector.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"2JFQr\\\":\\\"index.e2e69840.js\\\",\\\"bJmGX\\\":\\\"rtw.db725a81.js\\\",\\\"7WKo9\\\":\\\"rtw-trello.edaa1442.js\\\",\\\"cX2tx\\\":\\\"spotify.1e0f0708.js\\\",\\\"irEM1\\\":\\\"spotify-trello.00774160.js\\\",\\\"2Ywgl\\\":\\\"swm.415b8913.js\\\",\\\"cHbDk\\\":\\\"princeton.82973572.js\\\",\\\"kzChq\\\":\\\"index.b7389a8e.js\\\"}\"));","import trelloEnums from '../shared/trello-enums';\n\n// const GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n// const BLACK_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-black.svg';\n// const WHITE_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-white.svg';\n\nconst get = async t => {\n\n    const onBtnClick = async t => {\n\n        const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n\n        return t.popup({\n            title: 'Toolbox preferences',\n            url: './board-buttons-popup-authors.html',\n            args: { myArgs: prefs }\n        });\n    };\n\n    return [{\n        text: 'Challenge Toolbox',\n        callback: t => onBtnClick(t),\n        condition: trelloEnums.Condition.Always\n      }];\n\n};\n\nexport const getBoardButtons = (t, opts) => {\n    return get(t);\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardBadges;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    console.log(`Current value for ${key} for card-badges`,  log);\n\n    // check for card in log - if there's a match return challenges, celebrations, both or neither\n    // match count agsainst specific card\n\n    if(challenges === 0 && celebrations === 0) return [];\n\n    const badges = [\n        {\n            text: challengeText,\n            color: \"red\"\n        },\n        {\n            text: celebrateText,\n            color: \"green\"\n        },\n    ];\n\n    const badgeArray = [];\n    \n    if(challenges !== 0) {\n        badgeArray.push(badges[0]);\n    } if(challenges !== 0) {\n        badgeArray.push(badges[1]);\n    }\n\n    return t\n    .card('id', 'name')            \n    .then(function (card) {\n        return badgeArray;\n    });\n};\n\nexport const getCardBadges = (t, opts) => {\n    return get(t);\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    const onCloseChallengToolbox = t => {\n        console.log('onCloseChallengToolbox');\n    };\n\n    const card = await t.card('name').get('name');\n\n    console.log('card: ', JSON.stringify(card, null, 2));\n\n    return [\n        {\n            icon: GRAY_ICON,\n            text: challengeText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Challenge\",                    \n                    args: { type: trelloEnums.Type.Challenge },\n                    url: './modals/challenge.html',\n                    fullscreen: false,\n                    height: 500,                    \n                    callback: onCloseChallengToolbox,\n                });\n            }\n        },      \n        {\n            icon: GRAY_ICON,\n            text: celebrateText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Celebrate\",\n                    args: { type: trelloEnums.Type.Celebrate },\n                    url: './modals/celebrate.html',\n                    fullscreen: false,\n                    height: 500\n                });\n            }\n        }\n    ];\n};    \n\nexport const getCardButtons = (t, opts) => {\n    return get(t);\n}","const Authors = Object.freeze({\n    RTW: 'rtw',\n    Spotify: 'spotify',\n    SWM: \"swm\",\n    PrinciplesGreen: \"pg\",\n    Princeton: \"princeton\"\n});\n\nconst Environments = Object.freeze({\n    Trello: 'Trello'\n});\n\nconst enums = {\n    Authors,\n    Environments\n};\n\nexport default enums;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"bJmGX\"))).then(() => parcelRequire('b6NUa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"7WKo9\"))).then(() => parcelRequire('bEksa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cX2tx\"))).then(() => parcelRequire('bmO0s'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"irEM1\"))).then(() => parcelRequire('f1e8W'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"2Ywgl\"))).then(() => parcelRequire('ffvez'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cHbDk\"))).then(() => parcelRequire('epFvb'));","import enums from './enums';\n\nconst getTrelloData = async author => {\n\n    const id = author.id;\n\n    return await getAuthorDataById(id);\n\n};\n\nconst getAuthorDataById = async id => {\n\n    let data, trelloData;\n    \n    return (async () => {\n        switch(id) {\n            case enums.Authors.RTW:\n                data = await import('./data/rtw.json');\n                trelloData = await import('./data/rtw-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Spotify:\n                data = await import('./data/spotify.json');\n                trelloData = await import('./data/spotify-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.SWM:\n                data = await import('./data/swm.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Princeton:\n                data = await import('./data/princeton.json');\n                return { ...data, ...trelloData };\n        }\n    })();\n};\n\nconst api = {\n    getTrelloData,\n    getAuthorDataById\n};\n\nexport default api;","import regeneratorRuntime from \"regenerator-runtime\";\nimport ChallengeLog from '../shared/challenge-log';\nimport trelloEnums from '../shared/trello-enums';\nimport api from '../api/api';\n\nconst getData = async prefs => {\n    return await api.getAuthorDataById(prefs.id);\n};\n\nconst getCapabilityPreferences = (data, capability) => {\n    \n    const capabilities = data.capabilities;\n    const capabilitySelection = capabilities.find(c => c.capability === capability);\n\n    if(capabilitySelection && capabilitySelection.enabled) {\n        return capabilitySelection.labels;\n    } else {\n        return [];\n    }\n};\n\nconst onLabelForPopupClick = (t, context, popup) => {\n    \n    return t.popup({\n        title: popup.prompt,\n        items: popup.effects\n    });\n\n    // click events missing …\n};\n\nconst onLabelForActionClick = async (t, context, pledge) => {\n\n    const challengeLog = new ChallengeLog();\n    \n    const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n    await t.set(scope, visibility, key, updatedPledges); // pass func to mock\n    return await t.get(scope, visibility, key);\n\n    // update label in situ after click?\n};\n\nconst getTrelloLabels = async ({pledges, log, context, popup = null}) => {\n\n    console.log('getTrelloLabels log: ', log);\n\n    return popup \n            ? pledges.map(pledge => {\n                return {\n                    text: `${pledge.text} ${ChallengeLog.getCustomBadgeCounts(context, log, pledge)}`,\n                    condition: trelloEnums.Condition.Always,\n                    callback: t => onLabelForPopupClick(t, context, popup)\n                }\n            })\n            : pledges.map(pledge => {\n                return {\n                    text: pledge.text,\n                    condition: trelloEnums.Condition.Always,\n                    callback: t => onLabelForActionClick(t, context, pledge)\n                }\n            });\n};\n\nconst getPopup = async data => {\n    \n    const popup = data.popup;\n\n    if(!popup || (popup && !popup.enabled)) return null;\n\n    return popup;\n}\n\nconst selector = {\n    getData,\n    getCapabilityPreferences,\n    getTrelloLabels,\n    getPopup\n}\n\nexport default selector;","import trelloEnums from '../shared/trello-enums';\nimport selector from '../shared/capability-selector';\n\nconst get = async t => {\n\n    const context = t.getContext();\n    const logEntries = await t.get(trelloEnums.Scope.Card, trelloEnums.Visibility.Shared, trelloEnums.Key.LogEntries);\n\n    let log;\n\n    if(logEntries && logEntries !== undefined) {\n        log = challengeLog.setLog(logEntries);\n    }\n    \n    const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n    const data = await selector.getData(prefs);\n\n    const pledges = await selector.getCapabilityPreferences(data, trelloEnums.Capability.CardDetailBadges);\n    const labels = await selector.getTrelloLabels({pledges, log, context: {board: context.board, card: context.card, member: context.member}});\n\n    return labels;\n};    \n\nexport const getCardDetailBadges = (t, opts) => {\n    return get(t);\n}","import { getBoardButtons } from \"../capabilities/board-buttons\";\nimport { getCardBadges } from \"../capabilities/card-badges\";\nimport { getCardButtons } from \"../capabilities/card-buttons\";\nimport { getCardDetailBadges } from \"../capabilities/card-detail-badges\";\n\nwindow.TrelloPowerUp.initialize({\n\n    \"board-buttons\": (t, opts) => getBoardButtons(t, opts),\n    \"card-badges\": (t, opts) => getCardBadges(t, opts),\n    'card-buttons': (t, opts) => getCardButtons(t, opts),\n    'card-detail-badges': (t, opts) => getCardDetailBadges(t, opts),\n\n});"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$56c9c886f2e8eba6$var$get","async","t","text","callback","prefs","get","$LdkDU","default","Scope","Board","Visibility","Shared","Key","ChallengePreferences","popup","title","url","args","myArgs","onBtnClick","condition","Condition","Always","$2db22ad5133da2c5$export$c73bb284c898a327","opts","scope","Card","visibility","key","LogEntries","capability","Capability","CardBadges","log","console","context","getContext","challenges","celebrations","$BvQ1f","getChallengeBadgeCounts","challengeText","getButtonText","Type","Challenge","celebrateText","Celebrate","badges","color","badgeArray","push","card","then","$2db22ad5133da2c5$var$get","$ffcb280b61afb824$export$79f535b67280aad0","CardButtons","onCloseChallengToolbox","stringify","icon","modal","type","fullscreen","height","$ffcb280b61afb824$var$get","$07f1dab97776ed9a$export$2e2bcd8739ae039","freeze","RTW","Spotify","SWM","PrinciplesGreen","Princeton","Trello","module","exports","import","resolve","$0d2d75f2a4f26470$var$getAuthorDataById","data","trelloData","Authors","$0d2d75f2a4f26470$export$2e2bcd8739ae039","author","$2e4141f889ef1b6d$export$2e2bcd8739ae039","getAuthorDataById","capabilitySelection","capabilities","find","c","enabled","labels","pledges","map","pledge","getCustomBadgeCounts","prompt","items","effects","$2e4141f889ef1b6d$var$onLabelForPopupClick","challengeLog","isPledgeNowLogged","updatedPledges","togglePledge","set","$2e4141f889ef1b6d$var$onLabelForActionClick","$c8e855563fa8e8ac$export$f01c584eba1b8a62","logEntries","undefined","setLog","getData","getCapabilityPreferences","CardDetailBadges","getTrelloLabels","board","member","$c8e855563fa8e8ac$var$get","window","TrelloPowerUp","initialize"],"version":3,"file":"index.e2e69840.js.map"}