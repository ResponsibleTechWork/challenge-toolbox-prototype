{"mappings":"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","sources":["src/shared/enums.js","src/shared/challenge-log.js","src/api/data/authors.json","src/capabilities/board-buttons.js","src/capabilities/card-badges.js","src/capabilities/card-buttons.js","src/js/connector.js"],"sourcesContent":["const Scope = Object.freeze({\n    Board: 'board',\n    Member: 'member',\n    Card: 'card',\n    Organization: 'organization'\n});\n\nconst Type = Object.freeze({\n    Challenge: 'challenge',\n    Celebrate: 'celebrate'\n});\n\nconst Visibility = Object.freeze({\n    Shared: 'shared',\n    Private: 'private'\n});\n\nconst Key = Object.freeze({\n    LogEntries: 'Log entries',\n    ChallengePreferences: 'Challenge preferences'\n});\n\nconst Capability = Object.freeze({\n    BoardButtons: 'board-buttons',\n    CardBadges: 'card-badges',\n    CardButtons: 'card-buttons',\n    CardDetailBadges: 'card-detail-badges'\n});\n\nconst Condition = Object.freeze({\n    Admin: 'admin',\n    Edit: 'edit',\n    ReadOnly: 'readOnly',\n    SignedIn: 'signedIn',\n    SignedOut: 'signedOut',\n    Always: 'always'\n});\n\nconst enums = {\n    Scope,\n    Type,\n    Visibility,\n    Key,\n    Capability,\n    Condition\n};\n\nexport default enums;","import enums from '../shared/enums';\n\nclass ChallengeLog {\n\n    constructor(type) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n        this.log.push({\n                type: this.type,\n                board: this.context.board,\n                member: this.context.member,\n                card: this.context.card,\n                pledge: {\n                    id: this.currentPledge.id,\n                    text: this.currentPledge.text,\n                    reasons: []\n                },                \n            })\n            return { isPledgeNowLogged: true, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    };\n    \n    // private\n    removePledgeFromLog() {\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n        \n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case enums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case enums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === enums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === enums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === enums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === enums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","{\n    \"authors\": [\n        {\n            \"name\": \"ResponsibleTech.Work\",\n            \"title\": \"ResponsibleTech.Work Pledges\"\n        },\n        {\n            \"name\": \"Spotify\",\n            \"title\": \"Spotify Ethics Assessment\"\n        },\n        {\n            \"name\": \"Sustainable Web Manifesto\",\n            \"title\": \"Sustainable Web Manifesto\"\n        },\n        {\n            \"name\": \"Principles.Green\",\n            \"title\": \"Principles of Green Software Engineering\"\n        }\n    ]\n}","import enums from '../shared/enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nimport data from '../api/data/authors.json';\n\nconst WHITE_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-white.svg';\nconst BLACK_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-black.svg';\n\nconst get = async t => {\n\n    const scope = enums.Scope.Board;\n    const visibility = enums.Visibility.Shared;\n    const key = enums.Key.ChallengePreferences;\n    const capability = enums.Capability.BoardButtons;\n\n    const context = t.getContext();\n\n    console.log('Context for board buttons: ', context);\n\n    const preferences = data.authors.map(a => {\n        return {\n            text: a.title,\n            callback: (t, opts) => {\n                console.log('t: ', t);\n                console.log('opts: ', opts);\n            }\n        }\n    });\n\n    const onBtnClick = t => {\n        console.log('t in onBtnClick: ', t);\n        // return t.popup({\n        //     title: 'Toolbox preferences',\n        //     items: preferences\n        // });\n    };\n\n    return [{\n        // icon: {\n        //   dark: WHITE_ICON,\n        //   light: BLACK_ICON\n        // },\n        text: 'Challenge Toolbox',\n        callback: t => onBtnClick(t),\n        condition: enums.Condition.Always\n      }];\n\n};\n\nexport const getBoardButtons = (t, opts) => {\n    return get(t);\n}","import enums from '../shared/enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst get = async t => {\n\n    const scope = enums.Scope.Card;\n    const visibility = enums.Visibility.Shared;\n    const key = enums.Key.LogEntries;\n    const capability = enums.Capability.CardBadges;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(enums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(enums.Type.Celebrate, celebrations);\n\n    console.log(`Current value for ${key} for card-badges`,  log);\n\n    // check for card in log - if there's a match return challenges, celebrations, both or neither\n    // match count agsainst specific card\n\n    if(challenges === 0 && celebrations === 0) return [];\n\n    const badges = [\n        {\n            text: challengeText,\n            color: \"red\"\n        },\n        {\n            text: celebrateText,\n            color: \"green\"\n        },\n    ];\n\n    const badgeArray = [];\n    \n    if(challenges !== 0) {\n        badgeArray.push(badges[0]);\n    } if(challenges !== 0) {\n        badgeArray.push(badges[1]);\n    }\n\n    return t\n    .card('id', 'name')            \n    .then(function (card) {\n        return badgeArray;\n    });\n};\n\nexport const getCardBadges = (t, opts) => {\n    return get(t);\n}","import enums from '../shared/enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n\nconst get = async t => {\n\n    const scope = enums.Scope.Card;\n    const visibility = enums.Visibility.Shared;\n    const key = enums.Key.LogEntries;\n    const capability = enums.Capability.CardButtons;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(enums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(enums.Type.Celebrate, celebrations);\n\n    const onCloseChallengToolbox = t => {\n        console.log('onCloseChallengToolbox');\n    };\n\n    const card = await t.card('name').get('name');\n\n    console.log('card: ', JSON.stringify(card, null, 2));\n\n    return [\n        {\n            icon: GRAY_ICON,\n            text: challengeText,\n            condition: enums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Challenge\",                    \n                    args: { type: enums.Type.Challenge },\n                    url: './modals/challenge.html',\n                    fullscreen: false,\n                    height: 500,                    \n                    callback: onCloseChallengToolbox,\n                });\n            }\n        },      \n        {\n            icon: GRAY_ICON,\n            text: celebrateText,\n            condition: enums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Celebrate\",\n                    args: { type: enums.Type.Celebrate },\n                    url: './modals/celebrate.html',\n                    fullscreen: false,\n                    height: 500\n                });\n            }\n        }\n    ];\n};    \n\nexport const getCardButtons = (t, opts) => {\n    return get(t);\n}","import { getBoardButtons } from \"../capabilities/board-buttons\";\nimport { getCardBadges } from \"../capabilities/card-badges\";\nimport { getCardButtons } from \"../capabilities/card-buttons\";\nimport { getCardDetailBadges } from \"../capabilities/card-detail-badges\";\n\nwindow.TrelloPowerUp.initialize({\n\n    \"board-buttons\": (t, opts) => getBoardButtons(t, opts),\n    \"card-badges\": (t, opts) => getCardBadges(t, opts),\n    'card-buttons': (t, opts) => getCardButtons(t, opts),\n    // 'card-detail-badges': (t, opts) => getCardDetailBadges(t, opts),\n\n});"],"names":["$6255d2bfcd4f8810$export$2e2bcd8739ae039","Object","freeze","Board","Member","Card","Organization","Challenge","Celebrate","Shared","Private","LogEntries","ChallengePreferences","BoardButtons","CardBadges","CardButtons","CardDetailBadges","Admin","Edit","ReadOnly","SignedIn","SignedOut","Always","$070c272ef4086d70$export$2e2bcd8739ae039","type","this","log","currentPledge","context","currentReason","islogTruthy","val","entries","length","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","push","board","member","card","pledge","id","text","reasons","isPledgeNowLogged","updatedPledges","map","entry","filter","removePledgeFromLog","getReasonsForCurrentPledge","togglePledge","isPledgeLogged","find","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Type","challenges","celebrations","Set","e","$f50b6bdb824df028$exports","JSON","parse","$56c9c886f2e8eba6$var$get","async","t","Scope","Visibility","Key","Capability","getContext","console","$parcel$interopDefault","authors","a","title","callback","opts","onBtnClick","condition","Condition","$2db22ad5133da2c5$export$c73bb284c898a327","scope","visibility","key","capability","get","getChallengeBadgeCounts","challengeText","getButtonText","celebrateText","badges","color","badgeArray","then","$2db22ad5133da2c5$var$get","$ffcb280b61afb824$export$79f535b67280aad0","onCloseChallengToolbox","stringify","icon","modal","args","url","fullscreen","height","$ffcb280b61afb824$var$get","window","TrelloPowerUp","initialize","$56c9c886f2e8eba6$export$8c317cf2bd6ef41c"],"version":3,"file":"index.91b3926e.js.map"}