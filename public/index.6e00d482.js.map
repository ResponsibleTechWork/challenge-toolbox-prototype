{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-0881923c7475fa82.js","src/capabilities/board-buttons.js","src/shared/challenge-log.js","src/capabilities/card-badges.js","src/capabilities/card-buttons.js","src/api/enums.js","node_modules/@parcel/runtime-js/lib/runtime-55e5ebecc04afa50.js","node_modules/@parcel/runtime-js/lib/runtime-237fb8d62ddb295a.js","node_modules/@parcel/runtime-js/lib/runtime-9b045f6875d19687.js","node_modules/@parcel/runtime-js/lib/runtime-975a9087b41bd714.js","node_modules/@parcel/runtime-js/lib/runtime-3a2c65592369123b.js","node_modules/@parcel/runtime-js/lib/runtime-dc6733200bf4e468.js","src/api/api.js","src/shared/capability-selector.js","src/capabilities/card-detail-badges.js","src/js/connector.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"2JFQr\\\":\\\"index.6e00d482.js\\\",\\\"bJmGX\\\":\\\"rtw.db725a81.js\\\",\\\"7WKo9\\\":\\\"rtw-trello.edaa1442.js\\\",\\\"cX2tx\\\":\\\"spotify.1e0f0708.js\\\",\\\"irEM1\\\":\\\"spotify-trello.00774160.js\\\",\\\"2Ywgl\\\":\\\"swm.415b8913.js\\\",\\\"cHbDk\\\":\\\"princeton.82973572.js\\\",\\\"3utAR\\\":\\\"index.5268e561.js\\\"}\"));","import trelloEnums from '../shared/trello-enums';\n\n// const GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n// const BLACK_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-black.svg';\n// const WHITE_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-white.svg';\n\nconst get = async t => {\n\n    const onBtnClick = async t => {\n\n        const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n\n        return t.popup({\n            title: 'Toolbox preferences',\n            url: './popups/authors.html',\n            args: { myArgs: prefs }\n        });\n    };\n\n    return [{\n        text: 'Challenge Toolbox',\n        callback: t => onBtnClick(t),\n        condition: trelloEnums.Condition.Always\n      }];\n\n};\n\nexport const getBoardButtons = (t, opts) => {\n    return get(t);\n}","import trelloEnums from './trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n        this.log.push({\n                type: this.type,\n                board: this.context.board,\n                member: this.context.member,\n                card: this.context.card,\n                pledge: {\n                    id: this.currentPledge.id,\n                    text: this.currentPledge.text,\n                    reasons: []\n                },                \n            })\n            return { isPledgeNowLogged: true, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    };\n    \n    // private\n    removePledgeFromLog() {\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n        \n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getCustomBadgeCounts(context, log, pledge = {}) {\n\n        if(log === undefined) {            \n            pledge.count = 0;\n            return pledge;\n            // return { ...pledge, count : 0 };\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === pledge.id && e.card === card).map(e => e.member)) ].length;\n\n        pledge.count = count;\n        return pledge;\n        // return { ...pledge, count };\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardBadges;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    console.log(`Current value for ${key} for card-badges`,  log);\n\n    // check for card in log - if there's a match return challenges, celebrations, both or neither\n    // match count agsainst specific card\n\n    if(challenges === 0 && celebrations === 0) return [];\n\n    const badges = [\n        {\n            text: challengeText,\n            color: \"red\"\n        },\n        {\n            text: celebrateText,\n            color: \"green\"\n        },\n    ];\n\n    const badgeArray = [];\n    \n    if(challenges !== 0) {\n        badgeArray.push(badges[0]);\n    } if(challenges !== 0) {\n        badgeArray.push(badges[1]);\n    }\n\n    return t\n    .card('id', 'name')            \n    .then(function (card) {\n        return badgeArray;\n    });\n};\n\nexport const getCardBadges = (t, opts) => {\n    return get(t);\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    const onCloseChallengToolbox = t => {\n        console.log('onCloseChallengToolbox');\n    };\n\n    const card = await t.card('name').get('name');\n\n    console.log('card: ', JSON.stringify(card, null, 2));\n\n    return [\n        {\n            icon: GRAY_ICON,\n            text: challengeText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Challenge\",                    \n                    args: { type: trelloEnums.Type.Challenge },\n                    url: './modals/challenge.html',\n                    fullscreen: false,\n                    height: 500,                    \n                    callback: onCloseChallengToolbox,\n                });\n            }\n        },      \n        {\n            icon: GRAY_ICON,\n            text: celebrateText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Celebrate\",\n                    args: { type: trelloEnums.Type.Celebrate },\n                    url: './modals/celebrate.html',\n                    fullscreen: false,\n                    height: 500\n                });\n            }\n        }\n    ];\n};    \n\nexport const getCardButtons = (t, opts) => {\n    return get(t);\n}","const Authors = Object.freeze({\n    RTW: 'rtw',\n    Spotify: 'spotify',\n    SWM: \"swm\",\n    PrinciplesGreen: \"pg\",\n    Princeton: \"princeton\"\n});\n\nconst Environments = Object.freeze({\n    Trello: 'Trello'\n});\n\nconst enums = {\n    Authors,\n    Environments\n};\n\nexport default enums;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"bJmGX\"))).then(() => parcelRequire('b6NUa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"7WKo9\"))).then(() => parcelRequire('bEksa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cX2tx\"))).then(() => parcelRequire('bmO0s'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"irEM1\"))).then(() => parcelRequire('f1e8W'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"2Ywgl\"))).then(() => parcelRequire('ffvez'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cHbDk\"))).then(() => parcelRequire('epFvb'));","import enums from './enums';\n\nconst getTrelloData = async author => {\n\n    const id = author.id;\n\n    return await getAuthorDataById(id);\n\n};\n\nconst getAuthorDataById = async id => {\n\n    let data, trelloData;\n    \n    return (async () => {\n        switch(id) {\n            case enums.Authors.RTW:\n                data = await import('./data/rtw.json');\n                trelloData = await import('./data/rtw-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Spotify:\n                data = await import('./data/spotify.json');\n                trelloData = await import('./data/spotify-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.SWM:\n                data = await import('./data/swm.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Princeton:\n                data = await import('./data/princeton.json');\n                return { ...data, ...trelloData };\n        }\n    })();\n};\n\nconst api = {\n    getTrelloData,\n    getAuthorDataById\n};\n\nexport default api;","import regeneratorRuntime from \"regenerator-runtime\";\nimport ChallengeLog from '../shared/challenge-log';\nimport trelloEnums from '../shared/trello-enums';\nimport api from '../api/api';\n\nconst getData = async prefs => {\n    return await api.getAuthorDataById(prefs.id);\n};\n\nconst getCapabilityPreferences = (data, capability) => {\n    \n    const capabilities = data.capabilities;\n    const capabilitySelection = capabilities.find(c => c.capability === capability);\n\n    if(capabilitySelection && capabilitySelection.enabled) {\n        return capabilitySelection.labels;\n    } else {\n        return [];\n    }\n};\n\nconst onLabelForPopupClick = (t, context, popup) => {\n    \n    return t.popup({\n        title: popup.prompt,\n        items: popup.effects\n    });\n\n    // click events missing …\n};\n\nconst onLabelForActionClick = async (t, context, pledge) => {\n\n    const challengeLog = new ChallengeLog();\n    \n    const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n    await t.set(scope, visibility, key, updatedPledges); // pass func to mock\n    return await t.get(scope, visibility, key);\n\n    // update label in situ after click?\n};\n\nconst getTrelloLabels = async ({pledges, log, context, popup = null}) => {\n\n    console.log('getTrelloLabels log: ', log);\n\n    return popup \n            ? pledges.map(pledge => {\n                return {\n                    text: `${pledge.text} ${ChallengeLog.getCustomBadgeCounts(context, log, pledge)}`,\n                    condition: trelloEnums.Condition.Always,\n                    callback: t => onLabelForPopupClick(t, context, popup)\n                }\n            })\n            : pledges.map(pledge => {\n                return {\n                    text: pledge.text,\n                    condition: trelloEnums.Condition.Always,\n                    callback: t => onLabelForActionClick(t, context, pledge)\n                }\n            });\n};\n\nconst getPopup = async data => {\n    \n    const popup = data.popup;\n\n    if(!popup || (popup && !popup.enabled)) return null;\n\n    return popup;\n}\n\nconst selector = {\n    getData,\n    getCapabilityPreferences,\n    getTrelloLabels,\n    getPopup\n}\n\nexport default selector;","import trelloEnums from '../shared/trello-enums';\nimport selector from '../shared/capability-selector';\n\nconst get = async t => {\n\n    const context = t.getContext();\n    const logEntries = await t.get(trelloEnums.Scope.Card, trelloEnums.Visibility.Shared, trelloEnums.Key.LogEntries);\n\n    let log;\n\n    if(logEntries && logEntries !== undefined) {\n        log = challengeLog.setLog(logEntries);\n    }\n    \n    const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n    const data = await selector.getData(prefs);\n\n    const pledges = await selector.getCapabilityPreferences(data, trelloEnums.Capability.CardDetailBadges);\n    const labels = await selector.getTrelloLabels({pledges, log, context: {board: context.board, card: context.card, member: context.member}});\n\n    return labels;\n};    \n\nexport const getCardDetailBadges = (t, opts) => {\n    return get(t);\n}","import { getBoardButtons } from \"../capabilities/board-buttons\";\nimport { getCardBadges } from \"../capabilities/card-badges\";\nimport { getCardButtons } from \"../capabilities/card-buttons\";\nimport { getCardDetailBadges } from \"../capabilities/card-detail-badges\";\n\nwindow.TrelloPowerUp.initialize({\n\n    \"board-buttons\": (t, opts) => getBoardButtons(t, opts),\n    \"card-badges\": (t, opts) => getCardBadges(t, opts),\n    'card-buttons': (t, opts) => getCardButtons(t, opts),\n    'card-detail-badges': (t, opts) => getCardDetailBadges(t, opts),\n\n});"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$56c9c886f2e8eba6$var$get","async","t","text","callback","prefs","get","$LdkDU","default","Scope","Board","Visibility","Shared","Key","ChallengePreferences","popup","title","url","args","myArgs","onBtnClick","condition","Condition","Always","$070c272ef4086d70$export$2e2bcd8739ae039","type","Type","Challenge","this","log","currentPledge","context","currentReason","islogTruthy","val","entries","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","push","board","member","card","pledge","reasons","isPledgeNowLogged","updatedPledges","map","entry","filter","removePledgeFromLog","getReasonsForCurrentPledge","togglePledge","isPledgeLogged","find","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Celebrate","challenges","celebrations","Set","e","$2db22ad5133da2c5$export$c73bb284c898a327","opts","scope","Card","visibility","key","LogEntries","capability","Capability","CardBadges","console","getContext","getChallengeBadgeCounts","challengeText","getButtonText","celebrateText","badges","color","badgeArray","then","$2db22ad5133da2c5$var$get","$ffcb280b61afb824$export$79f535b67280aad0","CardButtons","onCloseChallengToolbox","stringify","icon","modal","fullscreen","height","$ffcb280b61afb824$var$get","$07f1dab97776ed9a$export$2e2bcd8739ae039","freeze","RTW","Spotify","SWM","PrinciplesGreen","Princeton","Trello","module","exports","import","resolve","$0d2d75f2a4f26470$var$getAuthorDataById","data","trelloData","Authors","$0d2d75f2a4f26470$export$2e2bcd8739ae039","author","$2e4141f889ef1b6d$export$2e2bcd8739ae039","getAuthorDataById","capabilitySelection","capabilities","c","enabled","labels","pledges","getCustomBadgeCounts","prompt","items","effects","$2e4141f889ef1b6d$var$onLabelForPopupClick","challengeLog","set","$2e4141f889ef1b6d$var$onLabelForActionClick","$c8e855563fa8e8ac$export$f01c584eba1b8a62","logEntries","getData","getCapabilityPreferences","CardDetailBadges","getTrelloLabels","$c8e855563fa8e8ac$var$get","window","TrelloPowerUp","initialize"],"version":3,"file":"index.6e00d482.js.map"}