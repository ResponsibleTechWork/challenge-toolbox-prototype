{"mappings":"siBAAAA,EAAiBC,KAAKC,MAAM,+bCIlBC,WAEN,MAAMC,EAA+B,wBAAtBC,SAASC,SAExB,IAAIC,EAAGC,EAEJJ,GACCG,EAAIE,OAAOC,cAAcC,SACzBH,EAAQD,EAAEK,IAAI,UAEdJ,EAAQ,CACJK,GAAI,UACJC,KAAM,UACNC,MAAO,6BAKf,MAAMC,EAAaX,SAASY,eAAe,WAErCC,EAAWC,EAAAnB,GAAKoB,QAAQC,MAAKC,GAAKA,EAAET,KAAOL,EAAMK,KAgBjDO,EAAUD,EAAAnB,GAAKoB,QAAQG,KAAID,GAEvB,yCAGTA,EAAAT,yBAAAS,EAAAT,KAAAK,EAAAL,GAAA,IAAA,oBAAAS,EAAAP,mDAKOS,UAAAJ,EAAwBK,KAAG,4CAClCC,EAAAC,iBAAA,SAAAC,GAzBiBzB,OAAUyB,EAAGf,KAE3B,IAAIT,EAAQ,OAAOyB,QAAQC,IAAIjB,GAE/B,MAAMkB,EAAQC,EAAAC,QAAYC,MAAMC,MAC1BC,EAAaJ,EAAAC,QAAYI,WAAWC,OACpCC,EAAMP,EAAAC,QAAYO,IAAIC,2BAEtBlC,EAAEmC,IAAIX,EAAOK,EAAYG,EAAKjB,GACpC,MAAMqB,QAAiBpC,EAAEqC,IAAIb,EAAOK,EAAYG,GAChDV,QAAQC,IAAI,wBAA0Ba,IAezCE,CAAAjB,EAAAF,EAAAb","sources":["src/api/data/authors.json","src/capabilities/board-buttons-popup-authors.js"],"sourcesContent":["{\n    \"authors\": [\n        {\n            \"id\": \"rtw\",\n            \"name\": \"ResponsibleTech.Work\",\n            \"title\": \"ResponsibleTech.Work Pledges\"\n        },\n        {\n            \"id\": \"spotify\",\n            \"name\": \"Spotify\",\n            \"title\": \"Spotify Ethics Assessment\"\n        },\n        {\n            \"id\": \"swm\",\n            \"name\": \"Sustainable Web Manifesto\",\n            \"title\": \"Sustainable Web Manifesto\"\n        },\n        {\n            \"id\": \"pg\",\n            \"name\": \"Principles.Green\",\n            \"title\": \"Principles of Green Software Engineering\"\n        },\n        {\n            \"id\": \"princeton\",\n            \"name\": \"Princeton web transparency\",\n            \"title\": \"Dark Patterns at Scale\"\n        }\n    ]\n}","import regeneratorRuntime from \"regenerator-runtime\";\nimport data from '../api/data/authors.json';\nimport trelloEnums from '../shared/trello-enums';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    let t, prefs;\n\n    if(isLive) {\n        t = window.TrelloPowerUp.iframe();\n        prefs = t.arg('prefs');\n    } else {\n        prefs = {\n            id: \"spotify\",\n            name: \"Spotify\",\n            title: \"Spotify Ethics Assessment\"\n        };\n    }\n\n\n    const authorList = document.getElementById('authors');\n\n    const selected = data.authors.find(a => a.id === prefs.id);\n\n    const selectAuthor = async (e, id) => {\n\n        if(!isLive) return console.log(id);\n\n        const scope = trelloEnums.Scope.Board;\n        const visibility = trelloEnums.Visibility.Shared;\n        const key = trelloEnums.Key.ChallengePreferences;\n\n        await t.set(scope, visibility, key, a);\n        const response = await t.get(scope, visibility, key);\n        console.log('return saved author: ',  response);\n\n    };\n        \n    const authors = data.authors.map(a => {\n\n        return `<li>\n                    <button id=\"${a.id}\" class=\"btn\"><span>${a.id === selected.id ? '*' : '-' }</span> <span>${a.title}</span></button>\n                </li>`;\n    });\n\n    authorList.innerHTML = authors.join('');\n\n    authorList.querySelectorAll('.btn').forEach(btn => {\n        btn.addEventListener('click', e => selectAuthor(e, btn.id));\n    });\n};\n\ninit();"],"names":["$f50b6bdb824df028$exports","JSON","parse","async","isLive","document","referrer","t","prefs","window","TrelloPowerUp","iframe","arg","id","name","title","authorList","getElementById","selected","$parcel$interopDefault","authors","find","a","map","innerHTML","join","btn","addEventListener","e","console","log","scope","$LdkDU","default","Scope","Board","visibility","Visibility","Shared","key","Key","ChallengePreferences","set","response","get","selectAuthor"],"version":3,"file":"board-buttons-popup-authors.37804c8b.js.map"}