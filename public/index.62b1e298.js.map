{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-1cba84badefa0144.js","src/api/data/authors.json","src/capabilities/board-buttons.js","src/capabilities/card-badges.js","src/capabilities/card-buttons.js","src/api/enums.js","node_modules/@parcel/runtime-js/lib/runtime-55e5ebecc04afa50.js","node_modules/@parcel/runtime-js/lib/runtime-237fb8d62ddb295a.js","node_modules/@parcel/runtime-js/lib/runtime-9b045f6875d19687.js","node_modules/@parcel/runtime-js/lib/runtime-975a9087b41bd714.js","node_modules/@parcel/runtime-js/lib/runtime-3a2c65592369123b.js","node_modules/@parcel/runtime-js/lib/runtime-dc6733200bf4e468.js","src/api/api.js","src/shared/capability-selector.js","src/capabilities/card-detail-badges.js","src/js/connector.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"2JFQr\\\":\\\"index.62b1e298.js\\\",\\\"bJmGX\\\":\\\"rtw.db725a81.js\\\",\\\"7WKo9\\\":\\\"rtw-trello.edaa1442.js\\\",\\\"cX2tx\\\":\\\"spotify.1e0f0708.js\\\",\\\"irEM1\\\":\\\"spotify-trello.00774160.js\\\",\\\"2Ywgl\\\":\\\"swm.415b8913.js\\\",\\\"cHbDk\\\":\\\"princeton.82973572.js\\\",\\\"kzChq\\\":\\\"index.b7389a8e.js\\\"}\"));","{\n    \"authors\": [\n        {\n            \"id\": \"rtw\",\n            \"name\": \"ResponsibleTech.Work\",\n            \"title\": \"ResponsibleTech.Work Pledges\"\n        },\n        {\n            \"id\": \"spotify\",\n            \"name\": \"Spotify\",\n            \"title\": \"Spotify Ethics Assessment\"\n        },\n        {\n            \"id\": \"swm\",\n            \"name\": \"Sustainable Web Manifesto\",\n            \"title\": \"Sustainable Web Manifesto\"\n        },\n        {\n            \"id\": \"pg\",\n            \"name\": \"Principles.Green\",\n            \"title\": \"Principles of Green Software Engineering\"\n        },\n        {\n            \"id\": \"princeton\",\n            \"name\": \"Princeton web transparency\",\n            \"title\": \"Dark Patterns at Scale\"\n        }\n    ]\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nimport data from '../api/data/authors.json';\n\nconst WHITE_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-white.svg';\nconst BLACK_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-black.svg';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Board;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.ChallengePreferences;\n    const capability = trelloEnums.Capability.BoardButtons;\n\n    const onBtnClick = async t => {\n\n        const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n        \n        const preferences = data.authors.map(a => {\n            return {\n                text: a.title,\n                icon: WHITE_ICON,\n                callback: async (t, opts) => {\n                    await t.set(scope, visibility, key, a);\n                    const response = await t.get(scope, visibility, key);\n                    console.log('return saved author: ',  response);\n                }\n            }\n        });\n    \n        console.log('prefs: ', prefs);\n\n        return t.popup({\n            title: 'Toolbox preferences',\n            items: preferences\n        });\n    };\n\n    return [{\n        // icon: {\n        //   dark: WHITE_ICON,\n        //   light: BLACK_ICON\n        // },\n        text: 'Challenge Toolbox',\n        callback: t => onBtnClick(t),\n        condition: trelloEnums.Condition.Always\n      }];\n\n};\n\nexport const getBoardButtons = (t, opts) => {\n    return get(t);\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardBadges;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    console.log(`Current value for ${key} for card-badges`,  log);\n\n    // check for card in log - if there's a match return challenges, celebrations, both or neither\n    // match count agsainst specific card\n\n    if(challenges === 0 && celebrations === 0) return [];\n\n    const badges = [\n        {\n            text: challengeText,\n            color: \"red\"\n        },\n        {\n            text: celebrateText,\n            color: \"green\"\n        },\n    ];\n\n    const badgeArray = [];\n    \n    if(challenges !== 0) {\n        badgeArray.push(badges[0]);\n    } if(challenges !== 0) {\n        badgeArray.push(badges[1]);\n    }\n\n    return t\n    .card('id', 'name')            \n    .then(function (card) {\n        return badgeArray;\n    });\n};\n\nexport const getCardBadges = (t, opts) => {\n    return get(t);\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    const log = await t.get(scope, visibility, key);\n\n    console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    const onCloseChallengToolbox = t => {\n        console.log('onCloseChallengToolbox');\n    };\n\n    const card = await t.card('name').get('name');\n\n    console.log('card: ', JSON.stringify(card, null, 2));\n\n    return [\n        {\n            icon: GRAY_ICON,\n            text: challengeText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Challenge\",                    \n                    args: { type: trelloEnums.Type.Challenge },\n                    url: './modals/challenge.html',\n                    fullscreen: false,\n                    height: 500,                    \n                    callback: onCloseChallengToolbox,\n                });\n            }\n        },      \n        {\n            icon: GRAY_ICON,\n            text: celebrateText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Celebrate\",\n                    args: { type: trelloEnums.Type.Celebrate },\n                    url: './modals/celebrate.html',\n                    fullscreen: false,\n                    height: 500\n                });\n            }\n        }\n    ];\n};    \n\nexport const getCardButtons = (t, opts) => {\n    return get(t);\n}","const Authors = Object.freeze({\n    RTW: 'rtw',\n    Spotify: 'spotify',\n    SWM: \"swm\",\n    PrinciplesGreen: \"pg\",\n    Princeton: \"princeton\"\n});\n\nconst Environments = Object.freeze({\n    Trello: 'Trello'\n});\n\nconst enums = {\n    Authors,\n    Environments\n};\n\nexport default enums;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"bJmGX\"))).then(() => parcelRequire('b6NUa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"7WKo9\"))).then(() => parcelRequire('bEksa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cX2tx\"))).then(() => parcelRequire('bmO0s'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"irEM1\"))).then(() => parcelRequire('f1e8W'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"2Ywgl\"))).then(() => parcelRequire('ffvez'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cHbDk\"))).then(() => parcelRequire('epFvb'));","import enums from './enums';\n\nconst getTrelloData = async author => {\n\n    const id = author.id;\n\n    return await getAuthorDataById(id);\n\n};\n\nconst getAuthorDataById = async id => {\n\n    let data, trelloData;\n    \n    return (async () => {\n        switch(id) {\n            case enums.Authors.RTW:\n                data = await import('./data/rtw.json');\n                trelloData = await import('./data/rtw-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Spotify:\n                data = await import('./data/spotify.json');\n                trelloData = await import('./data/spotify-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.SWM:\n                data = await import('./data/swm.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Princeton:\n                data = await import('./data/princeton.json');\n                return { ...data, ...trelloData };\n        }\n    })();\n};\n\nconst api = {\n    getTrelloData,\n    getAuthorDataById\n};\n\nexport default api;","import regeneratorRuntime from \"regenerator-runtime\";\nimport ChallengeLog from '../shared/challenge-log';\nimport trelloEnums from '../shared/trello-enums';\nimport api from '../api/api';\n\nconst getData = async prefs => {\n    return await api.getAuthorDataById(prefs.id);\n};\n\nconst getCapabilityPreferences = (data, capability) => {\n    \n    const capabilities = data.capabilities;\n    const capabilitySelection = capabilities.find(c => c.capability === capability);\n\n    if(capabilitySelection && capabilitySelection.enabled) {\n        return capabilitySelection.labels;\n    } else {\n        return [];\n    }\n};\n\nconst onLabelForPopupClick = (t, context, popup) => {\n    \n    return t.popup({\n        title: popup.prompt,\n        items: popup.effects\n    });\n\n    // click events missing …\n};\n\nconst onLabelForActionClick = async (t, context, pledge) => {\n\n    const challengeLog = new ChallengeLog();\n    \n    const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n    await t.set(scope, visibility, key, updatedPledges); // pass func to mock\n    return await t.get(scope, visibility, key);\n\n    // update label in situ after click?\n};\n\nconst getTrelloLabels = async ({pledges, log, context, popup = null}) => {\n\n    console.log('getTrelloLabels log: ', log);\n\n    return popup \n            ? pledges.map(pledge => {\n                return {\n                    text: `${pledge.text} ${ChallengeLog.getCustomBadgeCounts(context, log, pledge)}`,\n                    condition: trelloEnums.Condition.Always,\n                    callback: t => onLabelForPopupClick(t, context, popup)\n                }\n            })\n            : pledges.map(pledge => {\n                return {\n                    text: pledge.text,\n                    condition: trelloEnums.Condition.Always,\n                    callback: t => onLabelForActionClick(t, context, pledge)\n                }\n            });\n};\n\nconst getPopup = async data => {\n    \n    const popup = data.popup;\n\n    if(!popup || (popup && !popup.enabled)) return null;\n\n    return popup;\n}\n\nconst selector = {\n    getData,\n    getCapabilityPreferences,\n    getTrelloLabels,\n    getPopup\n}\n\nexport default selector;","import trelloEnums from '../shared/trello-enums';\nimport selector from '../shared/capability-selector';\n\nconst get = async t => {\n\n    const context = t.getContext();\n    const logEntries = await t.get(trelloEnums.Scope.Card, trelloEnums.Visibility.Shared, trelloEnums.Key.LogEntries);\n\n    let log;\n\n    if(logEntries && logEntries !== undefined) {\n        log = challengeLog.setLog(logEntries);\n    }\n    \n    const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n    const data = await selector.getData(prefs);\n\n    const pledges = await selector.getCapabilityPreferences(data, trelloEnums.Capability.CardDetailBadges);\n    const labels = await selector.getTrelloLabels({pledges, log, context: {board: context.board, card: context.card, member: context.member}});\n\n    return labels;\n};    \n\nexport const getCardDetailBadges = (t, opts) => {\n    return get(t);\n}","import { getBoardButtons } from \"../capabilities/board-buttons\";\nimport { getCardBadges } from \"../capabilities/card-badges\";\nimport { getCardButtons } from \"../capabilities/card-buttons\";\nimport { getCardDetailBadges } from \"../capabilities/card-detail-badges\";\n\nwindow.TrelloPowerUp.initialize({\n\n    \"board-buttons\": (t, opts) => getBoardButtons(t, opts),\n    \"card-badges\": (t, opts) => getCardBadges(t, opts),\n    'card-buttons': (t, opts) => getCardButtons(t, opts),\n    'card-detail-badges': (t, opts) => getCardDetailBadges(t, opts),\n\n});"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$f50b6bdb824df028$exports","$56c9c886f2e8eba6$var$get","async","t","scope","$LdkDU","default","Scope","Board","visibility","Visibility","Shared","key","Key","ChallengePreferences","Capability","BoardButtons","text","callback","prefs","get","preferences","$parcel$interopDefault","authors","map","a","title","icon","opts","set","response","console","log","popup","items","onBtnClick","condition","Condition","Always","$2db22ad5133da2c5$export$c73bb284c898a327","Card","LogEntries","capability","CardBadges","context","getContext","challenges","celebrations","$BvQ1f","getChallengeBadgeCounts","challengeText","getButtonText","Type","Challenge","celebrateText","Celebrate","badges","color","badgeArray","push","card","then","$2db22ad5133da2c5$var$get","$ffcb280b61afb824$export$79f535b67280aad0","CardButtons","onCloseChallengToolbox","stringify","modal","args","type","url","fullscreen","height","$ffcb280b61afb824$var$get","$07f1dab97776ed9a$export$2e2bcd8739ae039","freeze","RTW","Spotify","SWM","PrinciplesGreen","Princeton","Trello","module","exports","import","resolve","$0d2d75f2a4f26470$var$getAuthorDataById","data","trelloData","Authors","$0d2d75f2a4f26470$export$2e2bcd8739ae039","author","$2e4141f889ef1b6d$export$2e2bcd8739ae039","getAuthorDataById","capabilitySelection","capabilities","find","c","enabled","labels","pledges","pledge","getCustomBadgeCounts","prompt","effects","$2e4141f889ef1b6d$var$onLabelForPopupClick","challengeLog","isPledgeNowLogged","updatedPledges","togglePledge","$2e4141f889ef1b6d$var$onLabelForActionClick","$c8e855563fa8e8ac$export$f01c584eba1b8a62","logEntries","undefined","setLog","getData","getCapabilityPreferences","CardDetailBadges","getTrelloLabels","board","member","$c8e855563fa8e8ac$var$get","window","TrelloPowerUp","initialize"],"version":3,"file":"index.62b1e298.js.map"}