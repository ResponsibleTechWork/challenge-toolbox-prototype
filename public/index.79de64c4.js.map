{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-58682f3670814925.js","src/capabilities/board-buttons.js","src/shared/challenge-log.js","src/capabilities/card-badges.js","src/capabilities/card-buttons.js","src/api/enums.js","node_modules/@parcel/runtime-js/lib/runtime-55e5ebecc04afa50.js","node_modules/@parcel/runtime-js/lib/runtime-237fb8d62ddb295a.js","node_modules/@parcel/runtime-js/lib/runtime-9b045f6875d19687.js","node_modules/@parcel/runtime-js/lib/runtime-975a9087b41bd714.js","node_modules/@parcel/runtime-js/lib/runtime-3a2c65592369123b.js","node_modules/@parcel/runtime-js/lib/runtime-dc6733200bf4e468.js","src/api/api.js","src/shared/capability-selector.js","src/capabilities/card-detail-badges.js","src/capabilities/card-back-section.js","src/js/connector.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"2JFQr\\\":\\\"index.79de64c4.js\\\",\\\"bJmGX\\\":\\\"rtw.db725a81.js\\\",\\\"7WKo9\\\":\\\"rtw-trello.edaa1442.js\\\",\\\"cX2tx\\\":\\\"spotify.1e0f0708.js\\\",\\\"irEM1\\\":\\\"spotify-trello.00774160.js\\\",\\\"2Ywgl\\\":\\\"swm.415b8913.js\\\",\\\"cHbDk\\\":\\\"princeton.82973572.js\\\",\\\"dkzSf\\\":\\\"index.ab1d9c77.js\\\"}\"));","import trelloEnums from '../shared/trello-enums';\n\nconst get = async t => {\n\n    const onBtnClick = async t => {\n\n        return t.popup({\n            title: 'Toolbox preferences',\n            url: './board-buttons-popup-authors.html',\n            height: 225\n        });\n    };\n\n    return [{\n        text: 'Challenge Toolbox',\n        callback: t => onBtnClick(t),\n        condition: trelloEnums.Condition.Always\n      }];\n\n};\n\nexport const getBoardButtons = (t, opts) => {\n    return get(t);\n}","import trelloEnums from './trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n        this.log.push({\n                type: this.type,\n                board: this.context.board,\n                member: this.context.member,\n                card: this.context.card,\n                pledge: {\n                    id: this.currentPledge.id,\n                    text: this.currentPledge.text,\n                    reasons: []\n                },                \n            })\n            return { isPledgeNowLogged: true, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    };\n    \n    // private\n    removePledgeFromLog() {\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n\n        // console.log('togglePledge this.log ', this.log);\n        \n        // console.log('togglePledge this.type ', this.type);\n        \n        // console.log('togglePledge this.log ', this.log);\n\n        // console.log('this.isLogEmpty() ', this.isLogEmpty());\n\n        // console.log('this.log.find(entry => entry.pledge.id === pledge.id) ', this.log.find(entry => entry.pledge.id === pledge.id));\n\n        // console.log('this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type) ', this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n        \n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n\n        // console.log('togglePledge isPledgeLogged ', isPledgeLogged);\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getCustomBadgeCounts(context, log, pledge = {}) {\n\n        if(log === undefined) {            \n            return { ...pledge, count : 0 };\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === pledge.id && e.card === card).map(e => e.member)) ].length;\n\n        return { ...pledge, count };\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardBadges;\n\n    const log = await t.get(scope, visibility, key);\n\n    // console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);\n\n    const context = t.getContext();\n\n    // console.log('Context for card badges: ', context);\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    // console.log(`Current value for ${key} for card-badges`,  log);\n\n    // check for card in log - if there's a match return challenges, celebrations, both or neither\n    // match count agsainst specific card\n\n    if(challenges === 0 && celebrations === 0) return [];\n\n    const badges = [\n        {\n            text: challengeText,\n            color: \"red\"\n        },\n        {\n            text: celebrateText,\n            color: \"green\"\n        },\n    ];\n\n    const badgeArray = [];\n    \n    if(challenges !== 0) {\n        badgeArray.push(badges[0]);\n    } if(challenges !== 0) {\n        badgeArray.push(badges[1]);\n    }\n\n    return t\n    .card('id', 'name')            \n    .then(function (card) {\n        return badgeArray;\n    });\n};\n\nexport const getCardBadges = (t, opts) => {\n    return get(t);\n}","import trelloEnums from '../shared/trello-enums';\n\nimport ChallengeLog from '../shared/challenge-log';\n\nconst GRAY_ICON = 'https://cdn.hyperdev.com/us-east-1%3A3d31b21c-01a0-4da2-8827-4bc6e88b7618%2Ficon-gray.svg';\n\nconst get = async t => {\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    const log = await t.get(scope, visibility, key);\n\n    const context = t.getContext();\n\n    const { challenges, celebrations } = ChallengeLog.getChallengeBadgeCounts(context, log);\n\n    const challengeText = ChallengeLog.getButtonText(trelloEnums.Type.Challenge, challenges);\n    const celebrateText = ChallengeLog.getButtonText(trelloEnums.Type.Celebrate, celebrations);\n\n    const onCloseChallengToolbox = t => {\n        console.log('onCloseChallengToolbox');\n    };\n\n    return [\n        {\n            icon: GRAY_ICON,\n            text: challengeText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Challenge\",                    \n                    args: { type: trelloEnums.Type.Challenge },\n                    url: './challenge.html',\n                    fullscreen: false,\n                    height: 500,                    \n                    callback: onCloseChallengToolbox,\n                });\n            }\n        },      \n        {\n            icon: GRAY_ICON,\n            text: celebrateText,\n            condition: trelloEnums.Condition.Always,\n            callback: function(t){\n                return t.modal({\n                    title: \"Celebrate\",\n                    args: { type: trelloEnums.Type.Celebrate },\n                    url: './modals/celebrate.html',\n                    fullscreen: false,\n                    height: 500\n                });\n            }\n        }\n    ];\n};    \n\nexport const getCardButtons = (t, opts) => {\n    return get(t);\n}","const Authors = Object.freeze({\n    RTW: 'rtw',\n    Spotify: 'spotify',\n    SWM: \"swm\",\n    PrinciplesGreen: \"pg\",\n    Princeton: \"princeton\"\n});\n\nconst Environments = Object.freeze({\n    Trello: 'Trello'\n});\n\nconst enums = {\n    Authors,\n    Environments\n};\n\nexport default enums;","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"bJmGX\"))).then(() => parcelRequire('b6NUa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"7WKo9\"))).then(() => parcelRequire('bEksa'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cX2tx\"))).then(() => parcelRequire('bmO0s'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"irEM1\"))).then(() => parcelRequire('f1e8W'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"2Ywgl\"))).then(() => parcelRequire('ffvez'));","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"cHbDk\"))).then(() => parcelRequire('epFvb'));","import enums from './enums';\n\nconst getTrelloData = async author => {\n\n    const id = author.id;\n\n    return await getAuthorDataById(id);\n\n};\n\nconst getAuthorDataById = async id => {\n\n    let data, trelloData;\n    \n    return (async () => {\n        switch(id) {\n            case enums.Authors.RTW:\n                data = await import('./data/rtw.json');\n                trelloData = await import('./data/rtw-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Spotify:\n                data = await import('./data/spotify.json');\n                trelloData = await import('./data/spotify-trello.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.SWM:\n                data = await import('./data/swm.json');\n                return { ...data, ...trelloData };\n            case enums.Authors.Princeton:\n                data = await import('./data/princeton.json');\n                return { ...data, ...trelloData };\n        }\n    })();\n};\n\nconst api = {\n    getTrelloData,\n    getAuthorDataById\n};\n\nexport default api;","import regeneratorRuntime from \"regenerator-runtime\";\nimport ChallengeLog from '../shared/challenge-log';\nimport trelloEnums from '../shared/trello-enums';\nimport api from '../api/api';\n\nconst getData = async prefs => {\n    return await api.getAuthorDataById(prefs.id);\n};\n\nconst getCapabilityPreferences = (data, capability) => {\n    \n    const capabilities = data.capabilities;\n    const capabilitySelection = capabilities.find(c => c.capability === capability);\n\n    if(capabilitySelection && capabilitySelection.enabled) {\n        return capabilitySelection.labels;\n    } else {\n        return [];\n    }\n};\n\nconst onLabelForModalClick = (t, context, modal) => {\n    \n    return t.modal({\n        title: modal.prompt,\n        items: modal.effects\n    });\n\n    // click events missing …\n};\n\nconst onLabelForPopupClick = (t, context, popup) => {\n    \n    return t.popup({\n        title: popup.prompt,\n        items: popup.effects\n    });\n\n    // click events missing …\n};\n\nconst onLabelForActionClick = async (t, challengeLog, context, pledge) => {\n\n    console.log('context ', context);\n    console.log('pledge ', pledge);\n\n    const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n    console.log('updatedPledges ', updatedPledges);\n\n    // missing context, etc!!!!\n    await t.set(scope, visibility, key, updatedPledges); // pass func to mock\n    return await t.get(scope, visibility, key);\n\n    // update label in situ after click?\n};\n\nconst getTrelloLabels = async ({t, challengeLog, pledges, log, context, popup = null, modal = null, mode = trelloEnums.Mode.Label}) => {\n\n    console.log('log ', log);\n    console.log('pledges ', pledges);\n    console.log('context ', context);\n    console.log('modal ', modal);\n    console.log('mode ', mode);\n\n    const getCount = pledge => {\n        const count = ChallengeLog.getCustomBadgeCounts(context, log, pledge);\n        console.log('count ', count);\n        return count;\n    };\n\n    switch(mode) {\n        case trelloEnums.Mode.Label:\n            return pledges.map(pledge => {\n                return {\n                    text: pledge.text,\n                    condition: trelloEnums.Condition.Always,\n                    callback: () => onLabelForActionClick(t, challengeLog, context, pledge)\n                }\n            });\n            case trelloEnums.Mode.Popup:\n                return pledges.map(pledge => {\n                    return {\n                        text: `${pledge.text} ${getCount(pledge)}`,\n                        condition: trelloEnums.Condition.Always,\n                        callback: () => onLabelForPopupClick(t, context, popup)\n                    }\n                });\n            case trelloEnums.Mode.Modal:\n                return pledges.map(pledge => {\n                    return {\n                        text: `${pledge.text} ${ChallengeLog.getCustomBadgeCounts(context, log, pledge)}`,\n                        condition: trelloEnums.Condition.Always,\n                        callback: () => onLabelForModalClick(t, context, popup)\n                    }\n                });\n    }\n};\n\nconst getPopup = async data => {\n    \n    const popup = data.popup;\n\n    if(!popup || (popup && !popup.enabled)) return null;\n\n    return popup;\n}\n\nconst selector = {\n    getData,\n    getCapabilityPreferences,\n    getTrelloLabels,\n    getPopup\n}\n\nexport default selector;","import ChallengeLog from '../shared/challenge-log';\nimport trelloEnums from '../shared/trello-enums';\nimport selector from '../shared/capability-selector';\n\nconst get = async t => {\n\n    const context = t.getContext();\n\n    const logEntries = await t.get(trelloEnums.Scope.Card, trelloEnums.Visibility.Shared, trelloEnums.Key.LogEntries);\n\n    const challengeLog = new ChallengeLog(trelloEnums.Type.Challenge);\n\n    let log;\n\n    if(logEntries && logEntries !== undefined) {\n        log = challengeLog.setLog(logEntries);\n    }\n    \n    const prefs = await t.get(trelloEnums.Scope.Board, trelloEnums.Visibility.Shared, trelloEnums.Key.ChallengePreferences);\n    const data = await selector.getData(prefs);\n\n    const pledges = await selector.getCapabilityPreferences(data, trelloEnums.Capability.CardDetailBadges);\n\n    console.log('card-detail-badges pledges ', pledges);\n\n    const labels = await selector.getTrelloLabels({t, challengeLog, pledges, log, context: {board: context.board, card: context.card, member: context.member}, mode: trelloEnums.Mode.Label});\n\n    console.log('card-detail-badges labels ', labels);\n\n    return labels;\n};    \n\nexport const getCardDetailBadges = (t, opts) => {\n    return get(t);\n}","import ChallengeLog from '../shared/challenge-log';\nimport trelloEnums from '../shared/trello-enums';\nimport selector from '../shared/capability-selector';\n\nconst get = async t => {\n\n\n    const logEntries = await t.get(trelloEnums.Scope.Card, trelloEnums.Visibility.Shared, trelloEnums.Key.LogEntries);\n\n    const onLabelClick = async t => {\n\n\n\n        return t.popup\n    };\n\n    return {\n        title: 'My Card Back Section',\n        icon: GRAY_ICON, // Must be a gray icon, colored icons not allowed.\n        content: {\n          type: 'iframe',\n          url: t.signUrl('./section.html'),\n          height: 230, // Max height is 1500.\n          action: {\n            text: 'My Action',\n            callback: t => onLabelClick(t)\n          },\n        }\n    }\n    \n};\n\nexport const getCardBackSection = (t, opts) => {\n        return get(t);\n};","import { getBoardButtons } from \"../capabilities/board-buttons\";\nimport { getCardBadges } from \"../capabilities/card-badges\";\nimport { getCardButtons } from \"../capabilities/card-buttons\";\nimport { getCardDetailBadges } from \"../capabilities/card-detail-badges\";\nimport { getCardBackSection } from \"../capabilities/card-back-section\";\n\nwindow.TrelloPowerUp.initialize({\n\n    \"board-buttons\": (t, opts) => getBoardButtons(t, opts),\n    \"card-badges\": (t, opts) => getCardBadges(t, opts),\n    'card-buttons': (t, opts) => getCardButtons(t, opts),\n    'card-detail-badges': (t, opts) => getCardDetailBadges(t, opts),\n    'card-back-section': (t, opts) => getCardBackSection(t, opts),\n\n});"],"names":["$8b4d1930797b255e$export$6503ec6e8aabbaf","$8b4d1930797b255e$export$f7ad0328861e2f03","$8b4d1930797b255e$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$56c9c886f2e8eba6$export$8c317cf2bd6ef41c","t","opts","async","text","callback","popup","title","url","height","onBtnClick","condition","$LdkDU","default","Condition","Always","$56c9c886f2e8eba6$var$get","$070c272ef4086d70$export$2e2bcd8739ae039","type","Type","Challenge","this","log","currentPledge","context","currentReason","islogTruthy","val","entries","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","push","board","member","card","pledge","reasons","isPledgeNowLogged","updatedPledges","map","entry","filter","removePledgeFromLog","getReasonsForCurrentPledge","togglePledge","isPledgeLogged","find","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Celebrate","challenges","celebrations","Set","e","$2db22ad5133da2c5$export$c73bb284c898a327","scope","Scope","Card","visibility","Visibility","Shared","key","Key","LogEntries","Capability","CardBadges","get","getContext","getChallengeBadgeCounts","challengeText","getButtonText","celebrateText","badges","color","badgeArray","then","$2db22ad5133da2c5$var$get","$ffcb280b61afb824$export$79f535b67280aad0","CardButtons","onCloseChallengToolbox","console","icon","modal","args","fullscreen","$ffcb280b61afb824$var$get","$07f1dab97776ed9a$export$2e2bcd8739ae039","freeze","RTW","Spotify","SWM","PrinciplesGreen","Princeton","Trello","module","exports","import","resolve","$0d2d75f2a4f26470$var$getAuthorDataById","data","trelloData","Authors","$0d2d75f2a4f26470$export$2e2bcd8739ae039","author","$2e4141f889ef1b6d$export$2e2bcd8739ae039","prefs","getAuthorDataById","capability","capabilitySelection","capabilities","c","enabled","labels","challengeLog","pledges","mode","Mode","Label","getCount","getCustomBadgeCounts","set","$2e4141f889ef1b6d$var$onLabelForActionClick","Popup","prompt","items","effects","$2e4141f889ef1b6d$var$onLabelForPopupClick","Modal","$2e4141f889ef1b6d$var$onLabelForModalClick","$c8e855563fa8e8ac$export$f01c584eba1b8a62","logEntries","Board","ChallengePreferences","getData","getCapabilityPreferences","CardDetailBadges","getTrelloLabels","$c8e855563fa8e8ac$var$get","$08d03d463dd898aa$export$2f5db67aea87ff8","GRAY_ICON","content","signUrl","action","onLabelClick","$08d03d463dd898aa$var$get","window","TrelloPowerUp","initialize"],"version":3,"file":"index.79de64c4.js.map"}