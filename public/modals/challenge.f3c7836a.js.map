{"mappings":"siBAAAA,EAAiBC,KAAKC,MAAM,80CCKlBC,WAEN,MAAMC,EAA+B,wBAAtBC,SAASC,SAExBC,QAAQC,IAAI,WAAYJ,GAExB,MAAMK,EAAUC,EAAAV,GAAQW,KAAKC,MAAKC,GAAKA,EAAEC,WAAUL,QAE7CM,EAAmBV,SAASW,eAAe,WAC3CC,EAAmBZ,SAASW,eAAe,WAEjDX,SAASW,eAAe,OAAOE,KAAOR,EAAAV,GAAQW,KAAKC,MAAKC,GAAKA,EAAEC,WAAUK,IAEzE,MAAMC,EAAQC,EAAAC,QAAYC,MAAMC,KAC1BC,EAAaJ,EAAAC,QAAYI,WAAWC,OACpCC,EAAMP,EAAAC,QAAYO,IAAIC,WACtBC,EAAaV,EAAAC,QAAYU,WAAWC,YAE1C,IAAIC,EAAMC,EAAG3B,EAEVJ,GAEC+B,EAAIC,OAAOC,cAAcC,SACzB9B,QAAY2B,EAAEI,IAAInB,EAAOK,EAAYG,GACrCM,EAAOC,EAAEK,IAAI,QAEbjC,QAAQC,IAAG,mBAAoBoB,aAAeR,UAAcK,gBAAyBM,QAAmBvB,IAGxG0B,EAAOb,EAAAC,QAAYmB,KAAKC,UAG5B,MAAMC,EAAe,IAAIC,EAAAtB,QAAaY,GAEhCW,EAAUX,IAASb,EAAAC,QAAYmB,KAAKC,UACpChC,EAAAV,GAAQW,KAAKC,MAAKC,GAAKA,EAAEC,WAAU+B,QAAQC,SAC3CpC,EAAAV,GAAQW,KAAKC,MAAKC,GAAKA,EAAEC,WAAU+B,QAAQE,SAEjD,GAAGvC,QAAewC,IAARxC,EAAmB,CACzB,MAAMyC,EAAuBN,EAAaO,OAAO1C,GACjDD,QAAQC,IAAI,4BAA6BmC,EAAaO,OAAOD,IAGjE,MAAME,EAAmB,CAAI1C,EAAS2C,KAElCrC,EAAiBsC,iBAAiB,QAAQC,SAAQC,IAE9CA,EAAIC,UAAUC,OAAO,YAErBhD,EAAQ6C,SAAQI,IACRC,SAASP,EAAcQ,MAAQD,SAASJ,EAAIK,KAC5CL,EAAIC,UAAUK,IAAI,eAItBF,SAASP,EAAcQ,MAAQD,SAASJ,EAAIK,KAC5CL,EAAIC,UAAUK,IAAI,gBAsBxBC,EAAsBjB,IAIxB5B,EAAiBoC,iBAAiB,QAAQC,SAAQC,IAE9CA,EAAIC,UAAUC,OAAO,YAElBZ,IAAY,IAEfA,EAAQS,SAAQS,IACRJ,SAASI,EAAOH,MAAQD,SAASJ,EAAIK,IACrCL,EAAIC,UAAUK,IAAI,YAEdhB,EAAQmB,QAAOC,GAAMN,SAASM,EAAGL,MAAQD,SAASJ,EAAIK,QAAS,IAC/DL,EAAIC,UAAUC,OAAO,mBAkBnCS,EAAsB,KAExB,MAAMC,EAAc1D,EAAQ2D,KAAIV,IAE5B,MAAMW,EAAc1B,EAAa2B,wBAAwBZ,EAAOE,IAE1DJ,EAAYtB,IAASb,EAAAC,QAAYmB,KAAKC,UAAY,eAAiB,eAEzE,MAAM,6CAGTgB,EAAAE,kBAAAJ,MAAAE,EAAAa,6BAAAF,oDAKOG,UAAwBL,EAAOM,KAAA,4CACtClB,EAAAmB,iBAAA,SAAAC,GAnEmB,EAAIA,EAAGC,KAE3B,MAAMC,EAAUzE,EAAS+B,EAAE2C,aAAe,CACtCC,MAAO,WACPC,OAAQ,YACRC,KAAM,WAGJvB,EAASjD,EAAQG,MAAKsE,GAAKvB,SAASuB,EAAEtB,MAAQD,SAASiB,MAEtDO,kBAACA,EAAiBC,eAAEA,GAAmBzC,EAAa0C,aAAaR,EAASnB,GAEjFP,EAAoBiC,EAAgB1B,GACpC4B,IACAxB,EAAoBnB,EAAa4C,+BAqDhCC,CAAAb,EAAApB,EAAAK,SAKLT,EAAsBR,EAAA8C,mBAAA9C,EAAA+C,iCAKN,KAGZ,MAACC,EAAA9C,EAAAuB,KAAAL,GAED,6CAEiBA,EAAuBH,6BAAkBG,EAAAQ,6CAE1DtD,EAACuD,UAAAmB,EAAAlB,KAAA,IAEDxD,EAAAoC,iBAAiC,QAAAC,SAAAC,IACpCA,EAAAmB,iBAAA,SAAAC,GAlDuB,EAAIA,EAAGiB,KAE3B,MAAM7B,EAASlB,EAAQjC,MAAKiF,GAAKlC,SAASkC,EAAEjC,MAAQD,SAASiC,MAEtDE,kBAACA,EAAiBC,eAAEA,GAAmBpD,EAAaqD,aAAajC,GAExED,EAAoBiC,GAEpB7B,KA0CH+B,CAAAtB,EAAApB,EAAAK,SAMDE,EAAanB,EAAwB4C,mCAMhBlF,SAAEW,eAAsB,UAEnC0D,iBAAmB,SAASvE,MAAEwE,IAEpC,IAAAvE,EAAoC,OAEpC,MAAM8F,EAAEvD,EAAmBwD,eAErBhE,EAAEiE,IAAChF,EAAUK,EAAAG,EAAAsE,GAEtB,MAAAG,QAAAlE,EAAAI,IAAAnB,EAAAK,EAAAG,UACJrB,QAAAC,IAAA,yBAAA6F,SAEDlE,EAAAmE,aAAI","sources":["src/shared/sources.json","src/modals/challenge.js"],"sourcesContent":["{ \"data\": [\n    {\n        \"name\": \"Principles of Green Software Engineering\",\n        \"src\": \"https://principles.green/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"carbon efficient\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"energy efficient\"\n            }    \n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"efficient\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"low intensity\"\n                }                \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"inefficient\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"high intensity\"\n                }                \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Sustainable Web Manifesto\",\n        \"src\": \"https://www.sustainablewebmanifesto.com/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"clean\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"efficient\"\n            },    \n            {\n                \"id\": 3,\n                \"text\": \"open\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"honest\"\n            },\n            {\n                \"id\": 5,\n                \"text\": \"regenerative\"\n            },\n            {\n                \"id\": 6,\n                \"text\": \"resilient\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"supportive\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"collaborative\"\n                },      \n                {\n                    \"id\": 3,\n                    \"text\": \"fast\"\n                }      \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"obstructive\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"opaque\"\n                },                \n                {\n                    \"id\": 3,\n                    \"text\": \"slow\"\n                }           \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Challenge Toolbox Prototype\",\n        \"src\": \"https://www.figma.com/file/E7ZOq83wqAE6ABfoIXnnVm/Challenge-Toolbox-Prototype?node-'id'=3%3A111\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"respect people\"\n            },\n            {\n                \"id\": 2,\n                \"text\": \"protect against abuse\"\n            },\n            {\n                \"id\": 3,\n                \"text\": \"make accessible tech\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"consider social impacts\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"improves well-being\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"improves privacy\"\n                }            \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"annoying\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"misleading\"\n                }                \n            ]\n        },\n        \"selected\": true\n    }\n]}","import regeneratorRuntime from \"regenerator-runtime\";\nimport sources from '../shared/sources.json';\nimport trelloEnums from '../shared/trello-enums';\nimport ChallengeLog from '../shared/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    console.log('isLive: ', isLive);\n\n    const pledges = sources.data.find(s => s.selected).pledges;\n\n    const pledgesContainer = document.getElementById('pledges');\n    const reasonsContainer = document.getElementById('reasons');\n\n    document.getElementById('src').href = sources.data.find(s => s.selected).src;\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    let type, t, log;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        log = await t.get(scope, visibility, key);\n        type = t.arg('type');\n\n        console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);    \n\n    } else {\n        type = trelloEnums.Type.Challenge;\n    }\n\n    const challengeLog = new ChallengeLog(type);\n\n    const reasons = type === trelloEnums.Type.Challenge\n        ? sources.data.find(s => s.selected).reasons.negative\n        : sources.data.find(s => s.selected).reasons.positive;\n\n    if(log && log !== undefined) {\n        const updatedLogFromTrello = challengeLog.setLog(log);\n        console.log('set log with log from t: ', challengeLog.setLog(updatedLogFromTrello));   \n    }\n\n    const showSelectedPledges = (pledges, currentPledge) => {\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n            \n            pledges.forEach(pledge => {\n                if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                }\n            });\n\n            if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                btn.classList.add('selected');\n            }\n        });\n    };\n\n    const clickPledgeHandler = (e, pledgeId) => {\n        \n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const pledge = pledges.find(p => parseInt(p.id) === parseInt(pledgeId));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge); \n\n        showSelectedPledges(updatedPledges, pledge);\n        redrawChallengeReasons();\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    const showSelectedReasons = reasons => {\n\n        // console.log(JSON.stringify(challengeLog.getCurrentPledge(), null, 2));\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n\n            if(reasons === []) return;\n\n            reasons.forEach(reason => {\n                if (parseInt(reason.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                } else {\n                    if (reasons.filter(sb => parseInt(sb.id) === parseInt(btn.id)) === []) {\n                        btn.classList.remove('selected');\n                    }\n                }\n            });\n        });\n    };\n\n    const clickReasonHandler = (e, reasonId) => {\n\n        const reason = reasons.find(r => parseInt(r.id) === parseInt(reasonId));\n\n        const { isReasonNowLogged, updatedReasons } = challengeLog.toggleReason(reason);\n\n        showSelectedReasons(updatedReasons);\n\n        redrawChallengePledges();\n    };\n\n    const redrawChallengePledges = () => {\n\n        const pledgeItems = pledges.map(pledge => {\n        \n            const reasonCount = challengeLog.getReasonsCountByPledge(pledge.id);\n\n            const classList = type === trelloEnums.Type.Challenge ? 'btnChallenge' : 'btnCelebrate';\n\n            return `<li>\n                        <button id=\"${pledge.id}\" class=\"btn ${classList}\">${pledge.text}<span class=\"counter\">${reasonCount}</span></button>\n                    </li>`;\n        });\n\n        pledgesContainer.innerHTML = pledgeItems.join('');\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickPledgeHandler(e, btn.id));\n        });\n\n        showSelectedPledges(challengeLog.getLoggedPledges(), challengeLog.getCurrentPledge());\n    };\n\n    redrawChallengePledges();\n\n    const redrawChallengeReasons = () => {\n\n        const reasonItems = reasons.map(reason => {\n            return `<li>\n                        <button id=\"${reason.id}\" class=\"btn btnReason\">${reason.text}</button>\n                    </li>`;\n        });\n        \n        reasonsContainer.innerHTML = reasonItems.join('');\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickReasonHandler(e, btn.id));\n        });\n\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    redrawChallengeReasons();\n\n    const submitButton = document.getElementById('submit');\n\n    submitButton.addEventListener('click', async e => {\n\n        if(!isLive) return;\n        \n        const value = challengeLog.getLog();\n\n        await t.set(scope, visibility, key, value);\n\n        const response = await t.get(scope, visibility, key);\n\n        console.log('returned save object: ',  response);\n\n        await t.notifyParent('done');\n\n        return t.closeModal();\n\n    });\n};\n\ninit();\n"],"names":["$d21f854afd0d98a0$exports","JSON","parse","async","isLive","document","referrer","console","log","pledges","$parcel$interopDefault","data","find","s","selected","pledgesContainer","getElementById","reasonsContainer","href","src","scope","$LdkDU","default","Scope","Card","visibility","Visibility","Shared","key","Key","LogEntries","capability","Capability","CardButtons","type","t","window","TrelloPowerUp","iframe","get","arg","Type","Challenge","challengeLog","$BvQ1f","reasons","negative","positive","undefined","updatedLogFromTrello","setLog","showSelectedPledges","currentPledge","querySelectorAll","forEach","btn","classList","remove","pledge","parseInt","id","add","showSelectedReasons","reason","filter","sb","redrawChallengePledges","pledgeItems","map","reasonCount","getReasonsCountByPledge","text","innerHTML","join","addEventListener","e","pledgeId","context","getContext","board","member","card","p","isPledgeNowLogged","updatedPledges","togglePledge","redrawChallengeReasons","getReasonsForCurrentPledge","clickPledgeHandler","getLoggedPledges","getCurrentPledge","reasonItems","reasonId","r","isReasonNowLogged","updatedReasons","toggleReason","clickReasonHandler","value","getLog","set","response","notifyParent"],"version":3,"file":"challenge.f3c7836a.js.map"}