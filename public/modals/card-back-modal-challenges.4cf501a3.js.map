{"mappings":"IAsDAA,EAVoB,OA5CNC,OAAOC,OAAO,CACxBC,MAAO,QACPC,OAAQ,SACRC,KAAM,OACNC,aAAc,sBAGLL,OAAOC,OAAO,CACvBK,UAAW,YACXC,UAAW,yBAGIP,OAAOC,OAAO,CAC7BO,OAAQ,SACRC,QAAS,gBAGDT,OAAOC,OAAO,CACtBS,WAAY,cACZC,qBAAsB,qCAGPX,OAAOC,OAAO,CAC7BW,aAAc,gBACdC,WAAY,cACZC,YAAa,eACbC,iBAAkB,iCAGJf,OAAOC,OAAO,CAC5Be,MAAO,QACPC,KAAM,OACNC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,OAAQ,gBAGCrB,OAAOC,OAAO,CACvBqB,MAAO,QACPC,MAAO,QACPC,MAAO,eCwLXC,oBA7NgBC,EAAO3B,EAAY4B,KAAKrB,WAClCsB,KAAKF,KAAOA,EACZE,KAAKC,IAAM,GACXD,KAAKE,cAAgB,GACrBF,KAAKG,QAAU,GACfH,KAAKI,cAAgB,GAIvBC,YAAYC,GACR,OAAQA,MAAAA,GAAqCA,IAAQ,IAAMlC,OAAOmC,QAAQD,GAAKE,OAAS,GAAqB,iBAATF,EAIxGG,WAAWH,GACP,OAAQN,KAAKK,YAAYC,GAI7BI,aACI,OAAOV,KAAKC,MAAQ,GAIxBU,SACI,OAAOX,KAAKC,IAIhBW,OAAOX,GAEH,OADAD,KAAKC,IAAMA,EACJD,KAAKC,IAIhBY,QAAQf,GAEJ,OADAE,KAAKF,KAAOA,EACLE,KAAKF,KAIhBgB,mBACI,OAAOd,KAAKE,cAIhBa,iBAEI,MAAMC,EAAS,CACXlB,KAAME,KAAKF,KACXmB,MAAOjB,KAAKG,QAAQc,MACpBC,OAAQlB,KAAKG,QAAQe,OACrBC,KAAMnB,KAAKG,QAAQgB,KACnBH,OAAQ,CACJI,GAAIpB,KAAKE,cAAckB,GACvBC,KAAMrB,KAAKE,cAAcmB,KACzBC,QAAS,KAIjBtB,KAAKC,IAAIsB,KAAKP,GAId,MAAO,CAAEQ,mBAAmB,EAAMC,eAFVzB,KAAKC,IAAIyB,QAAOC,GAASA,EAAM7B,OAASE,KAAKF,MAAQ6B,EAAMR,OAASnB,KAAKG,QAAQgB,QAM7GS,sBAEI,OAAG5B,KAAKU,aAAqB,CAAEc,mBAAmB,EAAOC,eAAgB,IACtEzB,KAAK6B,2BAA2B7B,KAAKE,eAAeM,OAAS,EACrD,CAAEgB,mBAAmB,EAAOC,eAAgBzB,KAAKC,IAAI6B,KAAIH,GAASA,EAAMX,WAEnFhB,KAAKC,IAAMD,KAAKC,IAAIyB,QAAOC,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAC9F,CAAE0B,mBAAmB,EAAOC,eAAgBzB,KAAKC,IAAIyB,QAAOC,GAASA,EAAMX,SAAQU,QAAOC,GAASA,EAAM7B,OAASE,KAAKF,SAIlIiC,aAAa5B,EAASa,GAElBhB,KAAKE,cAAgBc,EACrBhB,KAAKG,QAAUA,EAEf,MAAM6B,GAAiBhC,KAAKU,cAAuBV,KAAKK,YAAYL,KAAKC,IAAIgC,MAAKN,GAASO,SAASP,EAAMX,OAAOI,MAAQc,SAASlB,EAAOI,KAAOO,EAAM7B,OAASE,KAAKF,SAE7J0B,kBAACA,EAAiBC,eAAEA,GAAmBO,EACxChC,KAAK4B,sBACL5B,KAAKe,iBAEX,MAAO,mBAAES,iBAAmBC,GAIhCU,mBACI,OAAOnC,KAAKC,IAAI6B,KAAIH,GAASA,EAAMX,SAIvCa,6BACI,GAAG7B,KAAKS,WAAWT,KAAKE,gBAAkBF,KAAKU,aAAc,MAAO,GACpE,MAAMY,EAAUtB,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAAMkB,OAAOM,QACrH,YAAmBc,IAAZd,EAAwB,GAAKA,EAIxCe,oBACI,MAAMf,EAAU,IAAKtB,KAAK6B,6BAA8B7B,KAAKI,eACvDkC,EAAiB,IAAKtC,KAAK6B,6BAA8B7B,KAAKI,eAEpE,OADAJ,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAAMkB,OAAOM,QAAUA,EACxG,CAAEiB,mBAAmB,iBAAMD,GAItCE,yBAEI,OADAxC,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAAMkB,OAAOM,QAAUtB,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAAMkB,OAAOM,QAAQI,QAAOe,GAAKA,EAAErB,KAAOpB,KAAKI,cAAcgB,KAC7P,CAAEmB,mBAAmB,EAAOD,eAAgBtC,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAAMkB,OAAOM,SAI5JoB,aAAaC,GAET,GAAG3C,KAAKE,gBAAkB,GAAI,OAE9BF,KAAKI,cAAgBuC,EAErB,MACMC,IADmB5C,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,UACtEE,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,MAAQ6B,EAAMX,OAAOM,QAAQW,MAAKQ,GAAKA,EAAErB,KAAOuB,EAAOvB,QAEnLmB,kBAACA,EAAiBD,eAAEA,GAAmBM,EACxC5C,KAAKwC,yBACLxC,KAAKqC,oBAEX,MAAO,mBAAEE,iBAAmBD,GAIhCO,kBACI,MAAMlB,EAAQ3B,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAOpB,KAAKE,cAAckB,IAAMO,EAAM7B,OAASE,KAAKF,OAChGwB,OAAoBc,IAAVT,GAAsBA,EAAMX,OAAOM,QAAUK,EAAMX,OAAOM,QAAe,GACnFwB,EAAcxB,EAAQd,OAAS,EAAIc,EAAQd,OAAS,EAC1D,OAAuB,IAAhBsC,EAAoB,GAAKA,EAAYC,WAIhDC,wBAAwBC,GACpB,MAAMtB,EAAQ3B,KAAKC,IAAIgC,MAAKN,GAASA,EAAMX,OAAOI,KAAO6B,GAAYtB,EAAM7B,OAASE,KAAKF,OACnFwB,OAAoBc,IAAVT,GAAsBA,EAAMX,OAAOM,QAAUK,EAAMX,OAAOM,QAAe,GACnFwB,EAAcxB,EAAQd,OAAS,EAAIc,EAAQd,OAAS,EAC1D,OAAuB,IAAhBsC,EAAoB,GAAKA,EAAYC,gCAI3BjD,EAAMoD,GAEvB,IAAI7B,EAAO,GAEX,OAAOvB,GACH,KAAK3B,EAAY4B,KAAKrB,UAClB2C,EAAO6B,EAAQ,EAAC,eACKA,KAAO,YAExB,MACR,KAAK/E,EAAY4B,KAAKpB,UAClB0C,EAAO6B,EAAQ,EAAC,iBACOA,KAAO,YAKtC,OAAO7B,iCAIoBlB,EAASF,GAEpC,QAAWmC,IAARnC,EACC,MAAO,CAAEkD,WAAY,EAAGC,aAAc,GAG1C,MAAMjC,EAAOhB,EAAQgB,KAIrB,MAAO,CACHgC,WAJuB,IAAK,IAAIE,IAAIpD,EAAIyB,QAAO4B,GAAKA,EAAExD,OAAS3B,EAAY4B,KAAKrB,WAAa4E,EAAEnC,OAASA,IAAMW,KAAIwB,GAAKA,EAAEpC,WAAWV,OAKpI4C,aAJyB,IAAK,IAAIC,IAAIpD,EAAIyB,QAAO4B,GAAKA,EAAExD,OAAS3B,EAAY4B,KAAKpB,WAAa2E,EAAEnC,OAASA,IAAMW,KAAIwB,GAAKA,EAAEpC,WAAWV,iCASrHL,EAASF,EAAKsD,EAAQ,IAE3C,QAAWnB,IAARnC,EACC,OAAO,EAGX,MAAMkB,EAAOhB,EAAQgB,KAIrB,MAFc,IAAK,IAAIkC,IAAIpD,EAAIyB,QAAO4B,GAAKA,EAAEtC,OAAOI,KAAOmC,EAAMnC,IAAMkC,EAAEnC,OAASA,IAAMW,KAAIwB,GAAKA,EAAEpC,WAAWV,uCAKlFL,EAASF,GAErC,QAAWmC,IAARnC,EACC,MAAO,CAAEkD,WAAY,EAAGC,aAAc,GAG1C,MAAMjC,EAAOhB,EAAQgB,KAIrB,MAAO,CACHgC,WAJuBlD,EAAIyB,QAAOC,GAASA,EAAM7B,OAAS3B,EAAY4B,KAAKrB,WAAaiD,EAAMR,OAASA,IAAMX,OAK7G4C,aAJyBnD,EAAIyB,QAAOC,GAASA,EAAM7B,OAAS3B,EAAY4B,KAAKpB,WAAagD,EAAMR,OAASA,IAAMX,UCrNjHgD,WAEN,MAAMC,EAA+B,wBAAtBC,SAASC,SAExB,IAAIC,EAAGC,EAEJJ,GAECG,EAAIE,OAAOC,cAAcC,SACzBH,EAAOD,EAAEK,IAAI,QACbC,QAAQjE,IAAI4D,IAGZA,EAAO,GAGX,MAAMM,EAAST,SAASU,eAAe,UACjCC,EAAkBX,SAASU,eAAe,UAE1CE,EAAe,IAAIzE,EAAaC,MAEhCyE,EAAaV,EAAKW,YAAYvC,MAAKwC,GAAKA,EAAEF,aAAepG,EAAYuG,WAAWvF,mBAyBhFwF,EAASd,EAAKc,OAAO7C,KAAIyB,GACrB,yCAGTA,EAAAnC,mBAAAmC,EAAAlC,yCAKD8C,EAAAS,UAAgBL,EAAAJ,SACRU,UAAwBF,EAAEG,KAAK,4CACtCC,EAAAC,iBAAA,SAAA1B,GAlCsBE,OAAUF,EAAGlC,KAEhC,MAAMjB,EAAUsD,EAASG,EAAEqB,aAAe,CACtChE,MAAO,WACPC,OAAQ,YACRC,KAAM,WAGJoC,EAAQoB,EAAO1C,MAAKsB,GAASrB,SAASqB,EAAMnC,MAAQc,SAASd,MAE5DI,kBAACA,EAAiBC,eAAEA,GAAmB6C,EAAavC,aAAa5B,EAASoD,GAE3E2B,EAAQ/G,EAAYgH,MAAM3G,KAC1B4G,EAAajH,EAAYkH,WAAWzG,OACpC0G,EAAMnH,EAAYoH,IAAIzG,iBAEtB8E,EAAE4B,IAAIN,EAAOE,EAAYE,EAAK7D,GAEpC,MAAMgE,QAAiB7B,EAAE8B,IAAIR,EAAOE,EAAYE,GAEhDpB,QAAQjE,IAAIwF,IAcfE,CAAArC,EAAAyB,EAAA3D","sources":["src/shared/trello-enums.js","src/shared/challenge-log.js","src/modals/card-back-modal-challenges.js"],"sourcesContent":["const Scope = Object.freeze({\n    Board: 'board',\n    Member: 'member',\n    Card: 'card',\n    Organization: 'organization'\n});\n\nconst Type = Object.freeze({\n    Challenge: 'challenge',\n    Celebrate: 'celebrate'\n});\n\nconst Visibility = Object.freeze({\n    Shared: 'shared',\n    Private: 'private'\n});\n\nconst Key = Object.freeze({\n    LogEntries: 'Log entries',\n    ChallengePreferences: 'Challenge preferences'\n});\n\nconst Capability = Object.freeze({\n    BoardButtons: 'board-buttons',\n    CardBadges: 'card-badges',\n    CardButtons: 'card-buttons',\n    CardDetailBadges: 'card-detail-badges'\n});\n\nconst Condition = Object.freeze({\n    Admin: 'admin',\n    Edit: 'edit',\n    ReadOnly: 'readOnly',\n    SignedIn: 'signedIn',\n    SignedOut: 'signedOut',\n    Always: 'always'\n});\n\nconst Mode = Object.freeze({\n    Label: 'label',\n    Popup: 'popup',\n    Modal: 'modal'\n});\n\nconst trelloEnums = {\n    Scope,\n    Type,\n    Visibility,\n    Key,\n    Capability,\n    Condition,\n    Mode\n};\n\nexport default trelloEnums;","import trelloEnums from './trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n\n        const pledge = {\n            type: this.type,\n            board: this.context.board,\n            member: this.context.member,\n            card: this.context.card,\n            pledge: {\n                id: this.currentPledge.id,\n                text: this.currentPledge.text,\n                reasons: []\n            },                \n        };\n\n        this.log.push(pledge);\n\n        const matchingEntries = this.log.filter(entry => entry.type === this.type && entry.card === this.context.card);\n\n        return { isPledgeNowLogged: true, updatedPledges: matchingEntries };\n    };\n    \n    // private\n    removePledgeFromLog() {\n\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.filter(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n\n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => parseInt(entry.pledge.id) === parseInt(pledge.id) && entry.type === this.type));\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getLabelVoteCount(context, log, label = {}) {\n\n        if(log === undefined) {            \n            return 0;\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === label.id && e.card === card).map(e => e.member)) ].length;\n\n        return count;\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import trelloEnums from '../shared/trello-enums';\nimport ChallengeLog from '../shared/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    let t, data;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        data = t.arg('data');\n        console.log(data);\n\n    } else {\n        data = {}\n    }\n\n    const prompt = document.getElementById('prompt');\n    const labelsContainer = document.getElementById('labels');\n\n    const challengeLog = new ChallengeLog(type);\n\n    const capability = data.capabilites.find(c => c.capability === trelloEnums.Capability.CardDetailBadges);\n\n    const clickLabelHandler = async (e, id) => {\n\n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const label = labels.find(label => parseInt(label.id) === parseInt(id));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, label);\n\n        const scope = trelloEnums.Scope.Card;\n        const visibility = trelloEnums.Visibility.Shared;\n        const key = trelloEnums.Key.LogEntries;\n\n        await t.set(scope, visibility, key, updatedPledges);\n\n        const response = await t.get(scope, visibility, key);\n\n        console.log(response);\n    };\n\n    const labels = data.labels.map(label => {\n        return `<li>\n                    <button id=\"${label.id}\" class=\"btn\">${label.text}</button>\n                </li>`;\n    });\n\n    prompt.innerText = capability.prompt;\n    labelsContainer.innerHTML = labels.join('');\n\n    labelsContainer.querySelectorAll('.btn').forEach(btn => {\n        btn.addEventListener('click', e => clickLabelHandler(e, btn.id));\n    });\n\n};\n\ninit();"],"names":["$08debb591dcf7038$export$2e2bcd8739ae039","Object","freeze","Board","Member","Card","Organization","Challenge","Celebrate","Shared","Private","LogEntries","ChallengePreferences","BoardButtons","CardBadges","CardButtons","CardDetailBadges","Admin","Edit","ReadOnly","SignedIn","SignedOut","Always","Label","Popup","Modal","$070c272ef4086d70$export$2e2bcd8739ae039","type","Type","this","log","currentPledge","context","currentReason","islogTruthy","val","entries","length","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","pledge","board","member","card","id","text","reasons","push","isPledgeNowLogged","updatedPledges","filter","entry","removePledgeFromLog","getReasonsForCurrentPledge","map","togglePledge","isPledgeLogged","find","parseInt","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","challenges","celebrations","Set","e","label","async","isLive","document","referrer","t","data","window","TrelloPowerUp","iframe","arg","console","prompt","getElementById","labelsContainer","challengeLog","capability","capabilites","c","Capability","labels","innerText","innerHTML","join","btn","addEventListener","getContext","scope","Scope","visibility","Visibility","key","Key","set","response","get","clickLabelHandler"],"version":3,"file":"card-back-modal-challenges.4cf501a3.js.map"}