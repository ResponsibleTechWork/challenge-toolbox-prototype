{"mappings":"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","sources":["src/shared/sources.json","src/shared/enums.js","src/shared/challenge-log.js","src/modals/challenge.js"],"sourcesContent":["{ \"data\": [\n    {\n        \"name\": \"Principles of Green Software Engineering\",\n        \"src\": \"https://principles.green/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"carbon efficient\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"energy efficient\"\n            }    \n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"efficient\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"low intensity\"\n                }                \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"inefficient\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"high intensity\"\n                }                \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Sustainable Web Manifesto\",\n        \"src\": \"https://www.sustainablewebmanifesto.com/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"clean\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"efficient\"\n            },    \n            {\n                \"id\": 3,\n                \"text\": \"open\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"honest\"\n            },\n            {\n                \"id\": 5,\n                \"text\": \"regenerative\"\n            },\n            {\n                \"id\": 6,\n                \"text\": \"resilient\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"supportive\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"collaborative\"\n                },      \n                {\n                    \"id\": 3,\n                    \"text\": \"fast\"\n                }      \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"obstructive\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"opaque\"\n                },                \n                {\n                    \"id\": 3,\n                    \"text\": \"slow\"\n                }           \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Challenge Toolbox Prototype\",\n        \"src\": \"https://www.figma.com/file/E7ZOq83wqAE6ABfoIXnnVm/Challenge-Toolbox-Prototype?node-'id'=3%3A111\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"respect people\"\n            },\n            {\n                \"id\": 2,\n                \"text\": \"protect against abuse\"\n            },\n            {\n                \"id\": 3,\n                \"text\": \"make accessible tech\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"consider social impacts\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"improves well-being\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"improves privacy\"\n                }            \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"annoying\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"misleading\"\n                }                \n            ]\n        },\n        \"selected\": true\n    }\n]}","const Scope = Object.freeze({\n    Board: 'board',\n    Member: 'member',\n    Card: 'card',\n    Organization: 'organization'\n});\n\nconst Type = Object.freeze({\n    Challenge: 'challenge',\n    Celebrate: 'celebrate'\n});\n\nconst Visibility = Object.freeze({\n    Shared: 'shared',\n    Private: 'private'\n});\n\nconst Key = Object.freeze({\n    LogEntries: 'Log entries'\n});\n\nconst Capability = Object.freeze({\n    CardBadges: 'card-badges',\n    CardButtons: 'card-buttons',\n    CardDetailBadges: 'card-detail-badges'\n});\n\nconst Condition = Object.freeze({\n    Admin: 'admin',\n    Edit: 'edit',\n    ReadOnly: 'readOnly',\n    SignedIn: 'signedIn',\n    SignedOut: 'signedOut',\n    Always: 'always'\n});\n\nconst enums = {\n    Scope,\n    Type,\n    Visibility,\n    Key,\n    Capability,\n    Condition\n};\n\nexport default enums;","import enums from '../shared/enums';\n\nexport class ChallengeLog {\n\n    constructor(type) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n        this.log.push({\n                type: this.type,\n                board: this.context.board,\n                member: this.context.member,\n                card: this.context.card,\n                pledge: {\n                    id: this.currentPledge.id,\n                    text: this.currentPledge.text,\n                    reasons: []\n                },                \n            })\n            return { isPledgeNowLogged: true, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    };\n    \n    // private\n    removePledgeFromLog() {\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n        \n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case enums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case enums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === enums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === enums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === enums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === enums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n}","import sources from '../shared/sources.json';\nimport enums from '../shared/enums';\nimport { ChallengeLog } from '../shared/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    console.log('isLive: ', isLive);\n\n    const pledges = sources.data.find(s => s.selected).pledges;\n\n    const pledgesContainer = document.getElementById('pledges');\n    const reasonsContainer = document.getElementById('reasons');\n\n    document.getElementById('src').href = sources.data.find(s => s.selected).src;\n\n    const scope = enums.Scope.Card;\n    const visibility = enums.Visibility.Shared;\n    const key = enums.Key.LogEntries;\n    const capability = enums.Capability.CardButtons;\n\n    let type, t, log;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        log = await t.get(scope, visibility, key);\n        type = t.arg('type');\n\n        console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);    \n\n    } else {\n        type = enums.Type.Challenge;\n    }\n\n    const challengeLog = new ChallengeLog(type);\n\n    const reasons = type === enums.Type.Challenge\n        ? sources.data.find(s => s.selected).reasons.negative\n        : sources.data.find(s => s.selected).reasons.positive;\n\n    if(log && log !== undefined) {\n        const updatedLogFromTrello = challengeLog.setLog(log);\n        console.log('set log with log from t: ', challengeLog.setLog(updatedLogFromTrello));   \n    }\n\n    const showSelectedPledges = (pledges, currentPledge) => {\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n            \n            pledges.forEach(pledge => {\n                if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                }\n            });\n\n            if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                btn.classList.add('selected');\n            }\n        });\n    };\n\n    const clickPledgeHandler = (e, pledgeId) => {\n        \n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const pledge = pledges.find(p => parseInt(p.id) === parseInt(pledgeId));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge); \n\n        showSelectedPledges(updatedPledges, pledge);\n        redrawChallengeReasons();\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    const showSelectedReasons = reasons => {\n\n        // console.log(JSON.stringify(challengeLog.getCurrentPledge(), null, 2));\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n\n            if(reasons === []) return;\n\n            reasons.forEach(reason => {\n                if (parseInt(reason.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                } else {\n                    if (reasons.filter(sb => parseInt(sb.id) === parseInt(btn.id)) === []) {\n                        btn.classList.remove('selected');\n                    }\n                }\n            });\n        });\n    };\n\n    const clickReasonHandler = (e, reasonId) => {\n\n        const reason = reasons.find(r => parseInt(r.id) === parseInt(reasonId));\n\n        const { isReasonNowLogged, updatedReasons } = challengeLog.toggleReason(reason);\n\n        showSelectedReasons(updatedReasons);\n\n        redrawChallengePledges();\n    };\n\n    const redrawChallengePledges = () => {\n\n        const pledgeItems = pledges.map(pledge => {\n        \n            const reasonCount = challengeLog.getReasonsCountByPledge(pledge.id);\n\n            const classList = type === enums.Type.Challenge ? 'btnChallenge' : 'btnCelebrate';\n\n            return `<li>\n                        <button id=\"${pledge.id}\" class=\"btn ${classList}\">${pledge.text}<span class=\"counter\">${reasonCount}</span></button>\n                    </li>`;\n        });\n\n        pledgesContainer.innerHTML = pledgeItems.join('');\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickPledgeHandler(e, btn.id));\n        });\n\n        showSelectedPledges(challengeLog.getLoggedPledges(), challengeLog.getCurrentPledge());\n    };\n\n    redrawChallengePledges();\n\n    const redrawChallengeReasons = () => {\n\n        const reasonItems = reasons.map(reason => {\n            return `<li>\n                        <button id=\"${reason.id}\" class=\"btn btnReason\">${reason.text}</button>\n                    </li>`;\n        });\n        \n        reasonsContainer.innerHTML = reasonItems.join('');\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickReasonHandler(e, btn.id));\n        });\n\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    redrawChallengeReasons();\n\n    const submitButton = document.getElementById('submit');\n\n    submitButton.addEventListener('click', async e => {\n\n        if(!isLive) return;\n        \n        const value = challengeLog.getLog();\n\n        await t.set(scope, visibility, key, value);\n\n        const response = await t.get(scope, visibility, key);\n\n        console.log('returned save object: ',  response);\n\n        await t.notifyParent('done');\n\n        return t.closeModal();\n\n    });\n};\n\ninit();\n"],"names":["$d21f854afd0d98a0$exports","JSON","parse","$6255d2bfcd4f8810$export$2e2bcd8739ae039","Object","freeze","Board","Member","Card","Organization","Challenge","Celebrate","Shared","Private","LogEntries","CardBadges","CardButtons","CardDetailBadges","Admin","Edit","ReadOnly","SignedIn","SignedOut","Always","$070c272ef4086d70$export$576bb4a7c9d16b85","type","this","log","currentPledge","context","currentReason","islogTruthy","val","entries","length","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","push","board","member","card","pledge","id","text","reasons","isPledgeNowLogged","updatedPledges","map","entry","filter","removePledgeFromLog","getReasonsForCurrentPledge","togglePledge","isPledgeLogged","find","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Type","challenges","celebrations","Set","e","async","isLive","document","referrer","console","pledges","$parcel$interopDefault","data","s","selected","pledgesContainer","getElementById","reasonsContainer","href","src","scope","Scope","visibility","Visibility","key","Key","capability","Capability","t","window","TrelloPowerUp","iframe","get","arg","challengeLog","negative","positive","updatedLogFromTrello","showSelectedPledges","querySelectorAll","forEach","btn","classList","remove","parseInt","add","showSelectedReasons","sb","redrawChallengePledges","pledgeItems","innerHTML","join","addEventListener","getContext","p","redrawChallengeReasons","clickPledgeHandler","reasonItems","reasonId","clickReasonHandler","value","set","response","notifyParent"],"version":3,"file":"challenge.3f12caf1.js.map"}