{"mappings":"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","sources":["src/shared/sources.json","src/shared/challenge-log.js","src/modals/challenge.js"],"sourcesContent":["{ \"data\": [\n    {\n        \"name\": \"Principles of Software Engineering\",\n        \"src\": \"https://principles.green/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"carbon efficient\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"energy efficient\"\n            }    \n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"efficient\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"low intensity\"\n                }                \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"inefficient\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"high intensity\"\n                }                \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Sustainable Web Manifesto\",\n        \"src\": \"https://www.sustainablewebmanifesto.com/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"clean\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"efficient\"\n            },    \n            {\n                \"id\": 3,\n                \"text\": \"open\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"honest\"\n            },\n            {\n                \"id\": 5,\n                \"text\": \"regenerative\"\n            },\n            {\n                \"id\": 6,\n                \"text\": \"resilient\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"supportive\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"collaborative\"\n                },      \n                {\n                    \"id\": 3,\n                    \"text\": \"fast\"\n                }      \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"obstructive\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"opaque\"\n                },                \n                {\n                    \"id\": 3,\n                    \"text\": \"slow\"\n                }           \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Challenge Toolbox Prototype\",\n        \"src\": \"https://www.figma.com/file/E7ZOq83wqAE6ABfoIXnnVm/Challenge-Toolbox-Prototype?node-'id'=3%3A111\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"respect people\"\n            },\n            {\n                \"id\": 2,\n                \"text\": \"protect against abuse\"\n            },\n            {\n                \"id\": 3,\n                \"text\": \"make accessible tech\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"consider social impacts\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"improves well-being\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"improves privacy\"\n                }            \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"annoying\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"misleading\"\n                }                \n            ]\n        },\n        \"selected\": true\n    }\n]}","import trelloEnums from './trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n\n        const pledge = {\n            type: this.type,\n            board: this.context.board,\n            member: this.context.member,\n            card: this.context.card,\n            pledge: {\n                id: this.currentPledge.id,\n                text: this.currentPledge.text,\n                reasons: []\n            },                \n        };\n\n        this.log.push(pledge);\n\n        const matchingEntries = this.log.map(entry => entry.type === this.type && entry.pledge.id === this.currentPledge.id);\n\n        return { isPledgeNowLogged: true, updatedPledges: matchingEntries };\n    };\n    \n    // private\n    removePledgeFromLog() {\n\n        console.log('removePledgeFromLog');\n\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n\n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => parseInt(entry.pledge.id) === parseInt(pledge.id) && entry.type === this.type));\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getLabelVoteCount(context, log, pledge = {}) {\n\n        if(log === undefined) {            \n            return 0;\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === pledge.id && e.card === card).map(e => e.member)) ].length;\n\n        return count;\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import regeneratorRuntime from \"regenerator-runtime\";\nimport sources from '../shared/sources.json';\nimport trelloEnums from '../shared/trello-enums';\nimport ChallengeLog from '../shared/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    // console.log('isLive: ', isLive);\n\n    const pledges = sources.data.find(s => s.selected).pledges;\n\n    const pledgesContainer = document.getElementById('pledges');\n    const reasonsContainer = document.getElementById('reasons');\n\n    document.getElementById('src').href = sources.data.find(s => s.selected).src;\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    let type, t, log;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        log = await t.get(scope, visibility, key);\n        type = t.arg('type');\n\n        // console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);    \n\n    } else {\n        type = trelloEnums.Type.Challenge;\n    }\n\n    const challengeLog = new ChallengeLog(type);\n\n    const reasons = type === trelloEnums.Type.Challenge\n        ? sources.data.find(s => s.selected).reasons.negative\n        : sources.data.find(s => s.selected).reasons.positive;\n\n    if(log && log !== undefined) {\n        const updatedLogFromTrello = challengeLog.setLog(log);\n        console.log('set log with log from t: ', updatedLogFromTrello);   \n    }\n\n    const showSelectedPledges = (pledges, currentPledge) => {\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n            \n            pledges.forEach(pledge => {\n                if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                }\n            });\n\n            if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                btn.classList.add('selected');\n            }\n        });\n    };\n\n    const clickPledgeHandler = (e, pledgeId) => {\n        \n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const pledge = pledges.find(p => parseInt(p.id) === parseInt(pledgeId));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n        showSelectedPledges(updatedPledges, pledge);\n        redrawChallengeReasons();\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    const showSelectedReasons = reasons => {\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n\n            if(reasons === []) return;\n\n            reasons.forEach(reason => {\n                if (parseInt(reason.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                } else {\n                    if (reasons.filter(sb => parseInt(sb.id) === parseInt(btn.id)) === []) {\n                        btn.classList.remove('selected');\n                    }\n                }\n            });\n        });\n    };\n\n    const clickReasonHandler = (e, reasonId) => {\n\n        const reason = reasons.find(r => parseInt(r.id) === parseInt(reasonId));\n\n        const { isReasonNowLogged, updatedReasons } = challengeLog.toggleReason(reason);\n\n        showSelectedReasons(updatedReasons);\n\n        redrawChallengePledges();\n    };\n\n    const redrawChallengePledges = () => {\n\n        const pledgeItems = pledges.map(pledge => {\n        \n            const reasonCount = challengeLog.getReasonsCountByPledge(pledge.id);\n\n            const classList = type === trelloEnums.Type.Challenge ? 'btnChallenge' : 'btnCelebrate';\n\n            return `<li>\n                        <button id=\"${pledge.id}\" class=\"btn ${classList}\">${pledge.text}<span class=\"counter\">${reasonCount}</span></button>\n                    </li>`;\n        });\n\n        pledgesContainer.innerHTML = pledgeItems.join('');\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickPledgeHandler(e, btn.id));\n        });\n\n        showSelectedPledges(challengeLog.getLoggedPledges(), challengeLog.getCurrentPledge());\n    };\n\n    redrawChallengePledges();\n\n    const redrawChallengeReasons = () => {\n\n        const reasonItems = reasons.map(reason => {\n            return `<li>\n                        <button id=\"${reason.id}\" class=\"btn btnReason\">${reason.text}</button>\n                    </li>`;\n        });\n        \n        reasonsContainer.innerHTML = reasonItems.join('');\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickReasonHandler(e, btn.id));\n        });\n\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    redrawChallengeReasons();\n\n    const submitButton = document.getElementById('submit');\n\n    submitButton.addEventListener('click', async e => {\n\n        if(!isLive) return;\n        \n        const value = challengeLog.getLog();\n\n        await t.set(scope, visibility, key, value);\n\n        const response = await t.get(scope, visibility, key);\n\n        console.log('returned save object: ',  response);\n\n        await t.notifyParent('done');\n\n        return t.closeModal();\n\n    });\n};\n\ninit();\n"],"names":["$d21f854afd0d98a0$exports","JSON","parse","$070c272ef4086d70$export$2e2bcd8739ae039","type","$LdkDU","default","Type","Challenge","this","log","currentPledge","context","currentReason","islogTruthy","val","Object","entries","length","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","pledge","board","member","card","id","text","reasons","push","isPledgeNowLogged","updatedPledges","map","entry","removePledgeFromLog","console","getReasonsForCurrentPledge","filter","togglePledge","isPledgeLogged","find","parseInt","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Celebrate","challenges","celebrations","Set","e","async","isLive","document","referrer","pledges","$parcel$interopDefault","data","s","selected","pledgesContainer","getElementById","reasonsContainer","href","src","scope","Scope","Card","visibility","Visibility","Shared","key","Key","LogEntries","Capability","CardButtons","t","window","TrelloPowerUp","iframe","get","arg","challengeLog","negative","positive","updatedLogFromTrello","showSelectedPledges","querySelectorAll","forEach","btn","classList","remove","add","showSelectedReasons","sb","redrawChallengePledges","pledgeItems","innerHTML","join","addEventListener","getContext","p","redrawChallengeReasons","clickPledgeHandler","reasonItems","reasonId","clickReasonHandler","value","set","response","notifyParent"],"version":3,"file":"challenge.776731de.js.map"}