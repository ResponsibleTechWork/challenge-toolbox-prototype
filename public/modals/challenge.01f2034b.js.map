{"mappings":"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","sources":["src/shared/sources.json","src/shared/challenge-log.js","src/modals/challenge.js"],"sourcesContent":["{ \"data\": [\n    {\n        \"name\": \"Principles of Software Engineering\",\n        \"src\": \"https://principles.green/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"carbon efficient\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"energy efficient\"\n            }    \n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"efficient\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"low intensity\"\n                }                \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"inefficient\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"high intensity\"\n                }                \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Sustainable Web Manifesto\",\n        \"src\": \"https://www.sustainablewebmanifesto.com/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"clean\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"efficient\"\n            },    \n            {\n                \"id\": 3,\n                \"text\": \"open\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"honest\"\n            },\n            {\n                \"id\": 5,\n                \"text\": \"regenerative\"\n            },\n            {\n                \"id\": 6,\n                \"text\": \"resilient\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"supportive\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"collaborative\"\n                },      \n                {\n                    \"id\": 3,\n                    \"text\": \"fast\"\n                }      \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"obstructive\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"opaque\"\n                },                \n                {\n                    \"id\": 3,\n                    \"text\": \"slow\"\n                }           \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Challenge Toolbox Prototype\",\n        \"src\": \"https://www.figma.com/file/E7ZOq83wqAE6ABfoIXnnVm/Challenge-Toolbox-Prototype?node-'id'=3%3A111\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"respect people\"\n            },\n            {\n                \"id\": 2,\n                \"text\": \"protect against abuse\"\n            },\n            {\n                \"id\": 3,\n                \"text\": \"make accessible tech\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"consider social impacts\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"improves well-being\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"improves privacy\"\n                }            \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"annoying\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"misleading\"\n                }                \n            ]\n        },\n        \"selected\": true\n    }\n]}","import trelloEnums from './trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n        this.log.push({\n                type: this.type,\n                board: this.context.board,\n                member: this.context.member,\n                card: this.context.card,\n                pledge: {\n                    id: this.currentPledge.id,\n                    text: this.currentPledge.text,\n                    reasons: []\n                },                \n            })\n            return { isPledgeNowLogged: true, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    };\n    \n    // private\n    removePledgeFromLog() {\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n\n        // console.log('togglePledge this.log ', this.log);\n        \n        // console.log('togglePledge this.type ', this.type);\n        \n        // console.log('togglePledge this.log ', this.log);\n\n        // console.log('this.isLogEmpty() ', this.isLogEmpty());\n\n        // console.log('this.log.find(entry => entry.pledge.id === pledge.id) ', this.log.find(entry => entry.pledge.id === pledge.id));\n\n        // console.log('this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type) ', this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n        \n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type));\n\n        // console.log('togglePledge isPledgeLogged ', isPledgeLogged);\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getCustomBadgeCounts(context, log, pledge = {}) {\n\n        if(log === undefined) {            \n            pledge.count = 0;\n            return pledge;\n            // return { ...pledge, count : 0 };\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === pledge.id && e.card === card).map(e => e.member)) ].length;\n\n        pledge.count = count;\n        return pledge;\n        // return { ...pledge, count };\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import regeneratorRuntime from \"regenerator-runtime\";\nimport sources from '../shared/sources.json';\nimport trelloEnums from '../shared/trello-enums';\nimport ChallengeLog from '../shared/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    // console.log('isLive: ', isLive);\n\n    const pledges = sources.data.find(s => s.selected).pledges;\n\n    const pledgesContainer = document.getElementById('pledges');\n    const reasonsContainer = document.getElementById('reasons');\n\n    document.getElementById('src').href = sources.data.find(s => s.selected).src;\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    let type, t, log;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        log = await t.get(scope, visibility, key);\n        type = t.arg('type');\n\n        // console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);    \n\n    } else {\n        type = trelloEnums.Type.Challenge;\n    }\n\n    const challengeLog = new ChallengeLog(type);\n\n    const reasons = type === trelloEnums.Type.Challenge\n        ? sources.data.find(s => s.selected).reasons.negative\n        : sources.data.find(s => s.selected).reasons.positive;\n\n    if(log && log !== undefined) {\n        const updatedLogFromTrello = challengeLog.setLog(log);\n        console.log('set log with log from t: ', challengeLog.setLog(updatedLogFromTrello));   \n    }\n\n    const showSelectedPledges = (pledges, currentPledge) => {\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n            \n            pledges.forEach(pledge => {\n                if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                }\n            });\n\n            if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                btn.classList.add('selected');\n            }\n        });\n    };\n\n    const clickPledgeHandler = (e, pledgeId) => {\n        \n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const pledge = pledges.find(p => parseInt(p.id) === parseInt(pledgeId));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n        showSelectedPledges(updatedPledges, pledge);\n        redrawChallengeReasons();\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    const showSelectedReasons = reasons => {\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n\n            if(reasons === []) return;\n\n            reasons.forEach(reason => {\n                if (parseInt(reason.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                } else {\n                    if (reasons.filter(sb => parseInt(sb.id) === parseInt(btn.id)) === []) {\n                        btn.classList.remove('selected');\n                    }\n                }\n            });\n        });\n    };\n\n    const clickReasonHandler = (e, reasonId) => {\n\n        const reason = reasons.find(r => parseInt(r.id) === parseInt(reasonId));\n\n        const { isReasonNowLogged, updatedReasons } = challengeLog.toggleReason(reason);\n\n        showSelectedReasons(updatedReasons);\n\n        redrawChallengePledges();\n    };\n\n    const redrawChallengePledges = () => {\n\n        const pledgeItems = pledges.map(pledge => {\n        \n            const reasonCount = challengeLog.getReasonsCountByPledge(pledge.id);\n\n            const classList = type === trelloEnums.Type.Challenge ? 'btnChallenge' : 'btnCelebrate';\n\n            return `<li>\n                        <button id=\"${pledge.id}\" class=\"btn ${classList}\">${pledge.text}<span class=\"counter\">${reasonCount}</span></button>\n                    </li>`;\n        });\n\n        pledgesContainer.innerHTML = pledgeItems.join('');\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickPledgeHandler(e, btn.id));\n        });\n\n        showSelectedPledges(challengeLog.getLoggedPledges(), challengeLog.getCurrentPledge());\n    };\n\n    redrawChallengePledges();\n\n    const redrawChallengeReasons = () => {\n\n        const reasonItems = reasons.map(reason => {\n            return `<li>\n                        <button id=\"${reason.id}\" class=\"btn btnReason\">${reason.text}</button>\n                    </li>`;\n        });\n        \n        reasonsContainer.innerHTML = reasonItems.join('');\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickReasonHandler(e, btn.id));\n        });\n\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    redrawChallengeReasons();\n\n    const submitButton = document.getElementById('submit');\n\n    submitButton.addEventListener('click', async e => {\n\n        if(!isLive) return;\n        \n        const value = challengeLog.getLog();\n\n        await t.set(scope, visibility, key, value);\n\n        const response = await t.get(scope, visibility, key);\n\n        console.log('returned save object: ',  response);\n\n        await t.notifyParent('done');\n\n        return t.closeModal();\n\n    });\n};\n\ninit();\n"],"names":["$d21f854afd0d98a0$exports","JSON","parse","$070c272ef4086d70$export$2e2bcd8739ae039","type","$LdkDU","default","Type","Challenge","this","log","currentPledge","context","currentReason","islogTruthy","val","Object","entries","length","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","push","board","member","card","pledge","id","text","reasons","isPledgeNowLogged","updatedPledges","map","entry","filter","removePledgeFromLog","getReasonsForCurrentPledge","togglePledge","isPledgeLogged","find","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Celebrate","challenges","celebrations","Set","e","async","isLive","document","referrer","pledges","$parcel$interopDefault","data","s","selected","pledgesContainer","getElementById","reasonsContainer","href","src","scope","Scope","Card","visibility","Visibility","Shared","key","Key","LogEntries","Capability","CardButtons","t","window","TrelloPowerUp","iframe","get","arg","challengeLog","negative","positive","updatedLogFromTrello","console","showSelectedPledges","querySelectorAll","forEach","btn","classList","remove","parseInt","add","showSelectedReasons","sb","redrawChallengePledges","pledgeItems","innerHTML","join","addEventListener","getContext","p","redrawChallengeReasons","clickPledgeHandler","reasonItems","reasonId","clickReasonHandler","value","set","response","notifyParent"],"version":3,"file":"challenge.01f2034b.js.map"}