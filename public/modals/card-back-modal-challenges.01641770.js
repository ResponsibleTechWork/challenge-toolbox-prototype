var e={Scope:Object.freeze({Board:"board",Member:"member",Card:"card",Organization:"organization"}),Type:Object.freeze({Challenge:"challenge",Celebrate:"celebrate"}),Visibility:Object.freeze({Shared:"shared",Private:"private"}),Key:Object.freeze({LogEntries:"Log entries",ChallengePreferences:"Challenge preferences"}),Capability:Object.freeze({BoardButtons:"board-buttons",CardBadges:"card-badges",CardButtons:"card-buttons",CardDetailBadges:"card-detail-badges",CardBackSection:"card-back-section"}),Condition:Object.freeze({Admin:"admin",Edit:"edit",ReadOnly:"readOnly",SignedIn:"signedIn",SignedOut:"signedOut",Always:"always"}),Mode:Object.freeze({Label:"label",Popup:"popup",Modal:"modal"})};var t=class{constructor(t=e.Type.Challenge){this.type=t,this.log=[],this.currentPledge={},this.context={},this.currentReason={}}islogTruthy(e){return null!=e&&e!==[]&&Object.entries(e).length>0||"number"==typeof e}islogFalsy(e){return!this.islogTruthy(e)}isLogEmpty(){return this.log===[]}getLog(){return this.log}setLog(e){return this.log=e,this.log}setType(e){return this.type=e,this.type}getCurrentPledge(){return this.currentPledge}addPledgeToLog(){const e={type:this.type,board:this.context.board,member:this.context.member,card:this.context.card,pledge:{id:this.currentPledge.id,text:this.currentPledge.text,reasons:[]}};this.log.push(e);return{isPledgeNowLogged:!0,updatedPledges:this.log.filter((e=>e.type===this.type&&e.card===this.context.card))}}removePledgeFromLog(){return this.isLogEmpty()?{isPledgeNowLogged:!1,updatedPledges:[]}:this.getReasonsForCurrentPledge(this.currentPledge).length>0?{isPledgeNowLogged:!1,updatedPledges:this.log.map((e=>e.pledge))}:(this.log=this.log.filter((e=>e.pledge.id!==this.currentPledge.id&&e.type===this.type)),{isPledgeNowLogged:!1,updatedPledges:this.log.filter((e=>e.pledge)).filter((e=>e.type===this.type))})}togglePledge(e,t){this.currentPledge=t,this.context=e;const r=!this.isLogEmpty()&&this.islogTruthy(this.log.find((e=>parseInt(e.pledge.id)===parseInt(t.id)&&e.type===this.type))),{isPledgeNowLogged:s,updatedPledges:d}=r?this.removePledgeFromLog():this.addPledgeToLog();return{isPledgeNowLogged:s,updatedPledges:d}}getLoggedPledges(){return this.log.map((e=>e.pledge))}getReasonsForCurrentPledge(){if(this.islogFalsy(this.currentPledge)||this.isLogEmpty())return[];const e=this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type)).pledge.reasons;return void 0===e?[]:e}addReasonToPledge(){const e=[...this.getReasonsForCurrentPledge(),this.currentReason],t=[...this.getReasonsForCurrentPledge(),this.currentReason];return this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type)).pledge.reasons=e,{isReasonNowLogged:!0,updatedReasons:t}}removeReasonFromPledge(){return this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type)).pledge.reasons=this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type)).pledge.reasons.filter((e=>e.id!==this.currentReason.id)),{isReasonNowLogged:!1,updatedReasons:this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type)).pledge.reasons}}toggleReason(e){if(this.currentPledge==={})return;this.currentReason=e;const t=!!this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type))&&!!this.log.find((t=>t.pledge.id===this.currentPledge.id&&t.type===this.type&&t.pledge.reasons.find((t=>t.id===e.id)))),{isReasonNowLogged:r,updatedReasons:s}=t?this.removeReasonFromPledge():this.addReasonToPledge();return{isReasonNowLogged:r,updatedReasons:s}}getReasonsCount(){const e=this.log.find((e=>e.pledge.id===this.currentPledge.id&&e.type===this.type)),t=void 0!==e&&e.pledge.reasons?e.pledge.reasons:[],r=t.length>0?t.length:0;return 0===r?"":r.toString()}getReasonsCountByPledge(e){const t=this.log.find((t=>t.pledge.id===e&&t.type===this.type)),r=void 0!==t&&t.pledge.reasons?t.pledge.reasons:[],s=r.length>0?r.length:0;return 0===s?"":s.toString()}static getButtonText(t,r){let s="";switch(t){case e.Type.Challenge:s=r>0?`Challenges (${r})`:"Challenge";break;case e.Type.Celebrate:s=r>0?`Celebrations (${r})`:"Celebrate"}return s}static getChallengeBadgeCounts(t,r){if(void 0===r)return{challenges:0,celebrations:0};const s=t.card;return{challenges:[...new Set(r.filter((t=>t.type===e.Type.Challenge&&t.card===s)).map((e=>e.member)))].length,celebrations:[...new Set(r.filter((t=>t.type===e.Type.Celebrate&&t.card===s)).map((e=>e.member)))].length}}static getLabelVoteCount(e,t,r={}){if(void 0===t)return 0;const s=e.card;return[...new Set(t.filter((e=>e.pledge.id===r.id&&e.card===s)).map((e=>e.member)))].length}static getChallengePledgeCounts(t,r){if(void 0===r)return{challenges:0,celebrations:0};const s=t.card;return{challenges:r.filter((t=>t.type===e.Type.Challenge&&t.card===s)).length,celebrations:r.filter((t=>t.type===e.Type.Celebrate&&t.card===s)).length}}};(async()=>{const r="https://trello.com/"===document.referrer;let s,d;r?(s=window.TrelloPowerUp.iframe(),d=s.arg("data"),console.log(d)):d={};const i=document.getElementById("prompt"),n=document.getElementById("labels"),l=new t(e.Type.Challenge),o=d.capabilities.find((t=>t.capability===e.Capability.CardBackSection));console.log("capability ",o);const g=o.labels.map((e=>`<li>\n                    <button id="${e.id}" class="btn">${e.text}</button>\n                </li>`));i.innerText=o.prompt,n.innerHTML=g.join(""),n.querySelectorAll(".btn").forEach((t=>{t.addEventListener("click",(d=>(async(t,d)=>{const i=r?s.getContext():{board:"board #1",member:"member #1",card:"card #1"},n=g.find((e=>parseInt(e.id)===parseInt(d))),{isPledgeNowLogged:o,updatedPledges:a}=l.togglePledge(i,n),h=e.Scope.Card,p=e.Visibility.Shared,c=e.Key.LogEntries;await s.set(h,p,c,a);const u=await s.get(h,p,c);console.log(u)})(0,t.id)))}))})();
//# sourceMappingURL=card-back-modal-challenges.01641770.js.map
