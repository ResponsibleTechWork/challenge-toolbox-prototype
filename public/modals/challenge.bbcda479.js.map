{"mappings":"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","sources":["src/shared/sources.json","src/shared/challenge-log.js","src/modals/challenge.js"],"sourcesContent":["{ \"data\": [\n    {\n        \"name\": \"Principles of Software Engineering\",\n        \"src\": \"https://principles.green/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"carbon efficient\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"energy efficient\"\n            }    \n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"efficient\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"low intensity\"\n                }                \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"inefficient\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"high intensity\"\n                }                \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Sustainable Web Manifesto\",\n        \"src\": \"https://www.sustainablewebmanifesto.com/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"clean\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"efficient\"\n            },    \n            {\n                \"id\": 3,\n                \"text\": \"open\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"honest\"\n            },\n            {\n                \"id\": 5,\n                \"text\": \"regenerative\"\n            },\n            {\n                \"id\": 6,\n                \"text\": \"resilient\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"supportive\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"collaborative\"\n                },      \n                {\n                    \"id\": 3,\n                    \"text\": \"fast\"\n                }      \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"obstructive\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"opaque\"\n                },                \n                {\n                    \"id\": 3,\n                    \"text\": \"slow\"\n                }           \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Challenge Toolbox Prototype\",\n        \"src\": \"https://www.figma.com/file/E7ZOq83wqAE6ABfoIXnnVm/Challenge-Toolbox-Prototype?node-'id'=3%3A111\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"respect people\"\n            },\n            {\n                \"id\": 2,\n                \"text\": \"protect against abuse\"\n            },\n            {\n                \"id\": 3,\n                \"text\": \"make accessible tech\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"consider social impacts\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"improves well-being\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"improves privacy\"\n                }            \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"annoying\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"misleading\"\n                }                \n            ]\n        },\n        \"selected\": true\n    }\n]}","import trelloEnums from './trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n\n        console.log('addPledgeToLog');\n\n        this.log.push({\n                type: this.type,\n                board: this.context.board,\n                member: this.context.member,\n                card: this.context.card,\n                pledge: {\n                    id: this.currentPledge.id,\n                    text: this.currentPledge.text,\n                    reasons: []\n                },                \n            })\n            return { isPledgeNowLogged: true, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    };\n    \n    // private\n    removePledgeFromLog() {\n\n        console.log('removePledgeFromLog');\n\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n\n        console.log('togglePledge this.log ', this.log);\n        \n        console.log('togglePledge this.type ', this.type);\n        \n        console.log('togglePledge this.log ', this.log);\n\n        console.log('this.isLogEmpty() ', this.isLogEmpty());\n\n        console.log('context ', context);\n        console.log('pledge ', pledge);\n\n        console.log('this.log.find(entry => entry.pledge.id === pledge.id) ', this.log.filternd(entry => parseInt(entry.pledge.id) === parseInt(pledge.id)));\n\n        console.log('this.log.find(entry => entry.pledge.id === pledge.id && entry.type === this.type) ', this.log.filter(entry => parseInt(entry.pledge.id) === parseInt(pledge.id) && entry.type === this.type));\n        \n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => parseInt(entry.pledge.id) === parseInt(pledge.id) && entry.type === this.type));\n\n        console.log('togglePledge isPledgeLogged ', isPledgeLogged);\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        // console.warn('button text: ', text);\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getLabelVoteCount(context, log, pledge = {}) {\n\n        if(log === undefined) {            \n            return 0;\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === pledge.id && e.card === card).map(e => e.member)) ].length;\n\n        return count;\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import regeneratorRuntime from \"regenerator-runtime\";\nimport sources from '../shared/sources.json';\nimport trelloEnums from '../shared/trello-enums';\nimport ChallengeLog from '../shared/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    // console.log('isLive: ', isLive);\n\n    const pledges = sources.data.find(s => s.selected).pledges;\n\n    const pledgesContainer = document.getElementById('pledges');\n    const reasonsContainer = document.getElementById('reasons');\n\n    document.getElementById('src').href = sources.data.find(s => s.selected).src;\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    let type, t, log;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        log = await t.get(scope, visibility, key);\n        type = t.arg('type');\n\n        // console.log(`Data stored for ${key} against ${scope} with ${visibility} access for ${capability}  : `,  log);    \n\n    } else {\n        type = trelloEnums.Type.Challenge;\n    }\n\n    const challengeLog = new ChallengeLog(type);\n\n    const reasons = type === trelloEnums.Type.Challenge\n        ? sources.data.find(s => s.selected).reasons.negative\n        : sources.data.find(s => s.selected).reasons.positive;\n\n    if(log && log !== undefined) {\n        const updatedLogFromTrello = challengeLog.setLog(log);\n        console.log('set log with log from t: ', updatedLogFromTrello);   \n    }\n\n    const showSelectedPledges = (pledges, currentPledge) => {\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n            \n            pledges.forEach(pledge => {\n                if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                }\n            });\n\n            if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                btn.classList.add('selected');\n            }\n        });\n    };\n\n    const clickPledgeHandler = (e, pledgeId) => {\n        \n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const pledge = pledges.find(p => parseInt(p.id) === parseInt(pledgeId));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n        showSelectedPledges(updatedPledges, pledge);\n        redrawChallengeReasons();\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    const showSelectedReasons = reasons => {\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n\n            if(reasons === []) return;\n\n            reasons.forEach(reason => {\n                if (parseInt(reason.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                } else {\n                    if (reasons.filter(sb => parseInt(sb.id) === parseInt(btn.id)) === []) {\n                        btn.classList.remove('selected');\n                    }\n                }\n            });\n        });\n    };\n\n    const clickReasonHandler = (e, reasonId) => {\n\n        const reason = reasons.find(r => parseInt(r.id) === parseInt(reasonId));\n\n        const { isReasonNowLogged, updatedReasons } = challengeLog.toggleReason(reason);\n\n        showSelectedReasons(updatedReasons);\n\n        redrawChallengePledges();\n    };\n\n    const redrawChallengePledges = () => {\n\n        const pledgeItems = pledges.map(pledge => {\n        \n            const reasonCount = challengeLog.getReasonsCountByPledge(pledge.id);\n\n            const classList = type === trelloEnums.Type.Challenge ? 'btnChallenge' : 'btnCelebrate';\n\n            return `<li>\n                        <button id=\"${pledge.id}\" class=\"btn ${classList}\">${pledge.text}<span class=\"counter\">${reasonCount}</span></button>\n                    </li>`;\n        });\n\n        pledgesContainer.innerHTML = pledgeItems.join('');\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickPledgeHandler(e, btn.id));\n        });\n\n        showSelectedPledges(challengeLog.getLoggedPledges(), challengeLog.getCurrentPledge());\n    };\n\n    redrawChallengePledges();\n\n    const redrawChallengeReasons = () => {\n\n        const reasonItems = reasons.map(reason => {\n            return `<li>\n                        <button id=\"${reason.id}\" class=\"btn btnReason\">${reason.text}</button>\n                    </li>`;\n        });\n        \n        reasonsContainer.innerHTML = reasonItems.join('');\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickReasonHandler(e, btn.id));\n        });\n\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    redrawChallengeReasons();\n\n    const submitButton = document.getElementById('submit');\n\n    submitButton.addEventListener('click', async e => {\n\n        if(!isLive) return;\n        \n        const value = challengeLog.getLog();\n\n        await t.set(scope, visibility, key, value);\n\n        const response = await t.get(scope, visibility, key);\n\n        console.log('returned save object: ',  response);\n\n        await t.notifyParent('done');\n\n        return t.closeModal();\n\n    });\n};\n\ninit();\n"],"names":["$d21f854afd0d98a0$exports","JSON","parse","$070c272ef4086d70$export$2e2bcd8739ae039","type","$LdkDU","default","Type","Challenge","this","log","currentPledge","context","currentReason","islogTruthy","val","Object","entries","length","islogFalsy","isLogEmpty","getLog","setLog","setType","getCurrentPledge","addPledgeToLog","console","push","board","member","card","pledge","id","text","reasons","isPledgeNowLogged","updatedPledges","map","entry","filter","removePledgeFromLog","getReasonsForCurrentPledge","togglePledge","filternd","parseInt","isPledgeLogged","find","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","reasonCount","toString","getReasonsCountByPledge","pledgeId","count","Celebrate","challenges","celebrations","Set","e","async","isLive","document","referrer","pledges","$parcel$interopDefault","data","s","selected","pledgesContainer","getElementById","reasonsContainer","href","src","scope","Scope","Card","visibility","Visibility","Shared","key","Key","LogEntries","Capability","CardButtons","t","window","TrelloPowerUp","iframe","get","arg","challengeLog","negative","positive","updatedLogFromTrello","showSelectedPledges","querySelectorAll","forEach","btn","classList","remove","add","showSelectedReasons","sb","redrawChallengePledges","pledgeItems","innerHTML","join","addEventListener","getContext","p","redrawChallengeReasons","clickPledgeHandler","reasonItems","reasonId","clickReasonHandler","value","set","response","notifyParent"],"version":3,"file":"challenge.bbcda479.js.map"}