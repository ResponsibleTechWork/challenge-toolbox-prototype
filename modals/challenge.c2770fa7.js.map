{"mappings":"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","sources":["src/challenge-log/sources.json","src/trello-api/trello-enums.js","src/challenge-log/challenge-log.js","src/modals/challenge.js"],"sourcesContent":["{ \"data\": [\n    {\n        \"name\": \"Principles of Software Engineering\",\n        \"src\": \"https://principles.green/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"carbon efficient\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"energy efficient\"\n            }    \n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"efficient\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"low intensity\"\n                }                \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"inefficient\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"high intensity\"\n                }                \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Sustainable Web Manifesto\",\n        \"src\": \"https://www.sustainablewebmanifesto.com/\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"clean\"\n            },            \n            {\n                \"id\": 2,\n                \"text\": \"efficient\"\n            },    \n            {\n                \"id\": 3,\n                \"text\": \"open\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"honest\"\n            },\n            {\n                \"id\": 5,\n                \"text\": \"regenerative\"\n            },\n            {\n                \"id\": 6,\n                \"text\": \"resilient\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"supportive\"\n                },\n                {\n                    \"id\": 2,\n                    \"text\": \"collaborative\"\n                },      \n                {\n                    \"id\": 3,\n                    \"text\": \"fast\"\n                }      \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"obstructive\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"opaque\"\n                },                \n                {\n                    \"id\": 3,\n                    \"text\": \"slow\"\n                }           \n            ]\n        },\n        \"selected\": false\n    },\n    {\n        \"name\": \"Challenge Toolbox Prototype\",\n        \"src\": \"https://www.figma.com/file/E7ZOq83wqAE6ABfoIXnnVm/Challenge-Toolbox-Prototype?node-'id'=3%3A111\",\n        \"pledges\": [\n            {\n                \"id\": 1,\n                \"text\": \"respect people\"\n            },\n            {\n                \"id\": 2,\n                \"text\": \"protect against abuse\"\n            },\n            {\n                \"id\": 3,\n                \"text\": \"make accessible tech\"\n            },\n            {\n                \"id\": 4,\n                \"text\": \"consider social impacts\"\n            }\n        ],\n        \"reasons\": {\n            \"positive\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"improves well-being\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"improves privacy\"\n                }            \n            ],\n            \"negative\": [\n                {\n                    \"id\": 1,\n                    \"text\": \"annoying\"\n                },                \n                {\n                    \"id\": 2,\n                    \"text\": \"misleading\"\n                }                \n            ]\n        },\n        \"selected\": true\n    }\n]}","const Scope = Object.freeze({\n    Board: 'board',\n    Member: 'member',\n    Card: 'card',\n    Organization: 'organization'\n});\n\nconst Type = Object.freeze({\n    Challenge: 'challenge',\n    Celebrate: 'celebrate'\n});\n\nconst Visibility = Object.freeze({\n    Shared: 'shared',\n    Private: 'private'\n});\n\nconst Key = Object.freeze({\n    LogEntries: 'Log entries',\n    ChallengePreferences: 'Challenge preferences'\n});\n\nconst Capability = Object.freeze({\n    BoardButtons: 'board-buttons',\n    CardBadges: 'card-badges',\n    CardButtons: 'card-buttons',\n    CardDetailBadges: 'card-detail-badges',\n    CardBackSection: 'card-back-section',\n});\n\nconst Condition = Object.freeze({\n    Admin: 'admin',\n    Edit: 'edit',\n    ReadOnly: 'readOnly',\n    SignedIn: 'signedIn',\n    SignedOut: 'signedOut',\n    Always: 'always'\n});\n\nconst Mode = Object.freeze({\n    Label: 'label',\n    Popup: 'popup',\n    Modal: 'modal'\n});\n\nconst trelloEnums = {\n    Scope,\n    Type,\n    Visibility,\n    Key,\n    Capability,\n    Condition,\n    Mode\n};\n\nexport default trelloEnums;","import trelloEnums from '../trello-api/trello-enums';\n\nclass ChallengeLog {\n\n    constructor(type = trelloEnums.Type.Challenge) {\n      this.type = type;\n      this.log = [];\n      this.currentPledge = {};\n      this.context = {};\n      this.currentReason = {};\n    }\n\n    // private \n    islogTruthy(val) {\n        return (val !== null && val !== undefined && val !== [] && Object.entries(val).length > 0 || typeof(val) === 'number' );\n    }\n\n    // private \n    islogFalsy(val) {\n        return !this.islogTruthy(val);\n    }\n\n    // public \n    isLogEmpty() {\n        return this.log === [];\n    }\n  \n    // public\n    getLog() {\n        return this.log;\n    }\n  \n    // public\n    setLog(log) {\n        this.log = log;\n        return this.log;\n    }\n  \n    // public\n    setType(type) {\n        this.type = type;\n        return this.type;\n    }\n\n    // public\n    getCurrentPledge() {\n        return this.currentPledge;\n    }\n\n    // private\n    addPledgeToLog() {\n\n        const pledge = {\n            type: this.type,\n            board: this.context.board,\n            member: this.context.member,\n            card: this.context.card,\n            pledge: {\n                id: this.currentPledge.id,\n                text: this.currentPledge.text,\n                reasons: []\n            },                \n        };\n\n        this.log.push(pledge);\n\n        const matchingEntries = this.log.filter(entry => entry.type === this.type && entry.card === this.context.card);\n\n        return { isPledgeNowLogged: true, updatedPledges: matchingEntries };\n    };\n    \n    // private\n    removePledgeFromLog() {\n\n        if(this.isLogEmpty()) return { isPledgeNowLogged: false, updatedPledges: [] };\n        if(this.getReasonsForCurrentPledge(this.currentPledge).length > 0) {\n            return { isPledgeNowLogged: false, updatedPledges: this.log.map(entry => entry.pledge) };\n        }\n        this.log = this.log.filter(entry => entry.pledge.id !== this.currentPledge.id && entry.type === this.type);\n        return { isPledgeNowLogged: false, updatedPledges: this.log.filter(entry => entry.pledge).filter(entry => entry.type === this.type) };\n    }\n\n    // public\n    togglePledge(context, pledge) {\n\n        this.currentPledge = pledge;\n        this.context = context;\n\n        const isPledgeLogged = this.isLogEmpty() ? false : this.islogTruthy(this.log.find(entry => parseInt(entry.pledge.id) === parseInt(pledge.id) && entry.type === this.type));\n\n        const { isPledgeNowLogged, updatedPledges } = isPledgeLogged\n            ? this.removePledgeFromLog()\n            : this.addPledgeToLog();\n\n        return { isPledgeNowLogged, updatedPledges };\n    }\n\n    // public\n    getLoggedPledges() {\n        return this.log.map(entry => entry.pledge);\n    }\n\n    // public \n    getReasonsForCurrentPledge() {\n        if(this.islogFalsy(this.currentPledge) || this.isLogEmpty()) return [];\n        const reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons;\n        return reasons === undefined ? [] : reasons;\n    }\n\n    // private \n    addReasonToPledge() {\n        const reasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        const updatedReasons = [ ...this.getReasonsForCurrentPledge(), this.currentReason ];\n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = reasons;\n        return { isReasonNowLogged: true, updatedReasons };\n    }\n\n    // private\n    removeReasonFromPledge() {        \n        this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons.filter(r => r.id !== this.currentReason.id);\n        return { isReasonNowLogged: false, updatedReasons: this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type).pledge.reasons };\n    }\n\n    // public\n    toggleReason(reason) {\n\n        if(this.currentPledge === {}) return;\n\n        this.currentReason = reason;\n\n        const isPledgeLogged = !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const isReasonLogged = isPledgeLogged && !!this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type && entry.pledge.reasons.find(r => r.id === reason.id));\n\n        const { isReasonNowLogged, updatedReasons } = isReasonLogged \n            ? this.removeReasonFromPledge()\n            : this.addReasonToPledge();\n\n        return { isReasonNowLogged, updatedReasons };\n    }\n\n    // public\n    getReasonsCount() {\n        const entry = this.log.find(entry => entry.pledge.id === this.currentPledge.id && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public\n    getReasonsCountByPledge(pledgeId) {\n        const entry = this.log.find(entry => entry.pledge.id === pledgeId && entry.type === this.type);\n        const reasons = entry !== undefined ? entry.pledge.reasons ? entry.pledge.reasons : [] : [];\n        const reasonCount = reasons.length > 0 ? reasons.length : 0;\n        return reasonCount === 0 ? '' : reasonCount.toString();\n    }\n\n    // public static\n    static getButtonText(type, count) {\n     \n        let text = '';\n\n        switch(type) {\n            case trelloEnums.Type.Challenge:\n                text = count > 0\n                    ? `Challenges (${count})`\n                    : `Challenge`;\n                    break;\n            case trelloEnums.Type.Celebrate:\n                text = count > 0\n                    ? `Celebrations (${count})`\n                    : `Celebrate`;\n                    break;\n        }\n\n        return text;\n    }\n\n    // public static\n    static getChallengeBadgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Challenge && e.card === card).map(e => e.member)) ].length;\n        const cardCelebrationCount = [ ...new Set(log.filter(e => e.type === trelloEnums.Type.Celebrate && e.card === card).map(e => e.member)) ].length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n\n    // public static \n    static getLabelVoteCount(context, log, label = {}) {\n\n        if(log === undefined) {            \n            return 0;\n        }\n\n        const card = context.card;\n\n        const count = [ ...new Set(log.filter(e => e.pledge.id === label.id && e.card === card).map(e => e.member)) ].length;\n\n        return count;\n    }\n\n    static getChallengePledgeCounts(context, log) {\n\n        if(log === undefined) {\n            return { challenges: 0, celebrations: 0 };\n        }\n\n        const card = context.card;\n        const cardChallengeCount = log.filter(entry => entry.type === trelloEnums.Type.Challenge && entry.card === card).length;\n        const cardCelebrationCount = log.filter(entry => entry.type === trelloEnums.Type.Celebrate && entry.card === card).length;\n\n        return {\n            challenges: cardChallengeCount,\n            celebrations: cardCelebrationCount\n        }\n    }\n};\n\nexport default ChallengeLog;","import regeneratorRuntime from \"regenerator-runtime\";\nimport sources from '../challenge-log/sources.json';\nimport trelloEnums from '../trello-api/trello-enums';\nimport ChallengeLog from '../challenge-log/challenge-log';\n\nconst init = async () => {\n\n    const isLive = document.referrer === 'https://trello.com/';\n\n    const pledges = sources.data.find(s => s.selected).pledges;\n\n    const pledgesContainer = document.getElementById('pledges');\n    const reasonsContainer = document.getElementById('reasons');\n\n    document.getElementById('src').href = sources.data.find(s => s.selected).src;\n\n    const scope = trelloEnums.Scope.Card;\n    const visibility = trelloEnums.Visibility.Shared;\n    const key = trelloEnums.Key.LogEntries;\n    const capability = trelloEnums.Capability.CardButtons;\n\n    let type, t, log;\n\n    if(isLive) {\n\n        t = window.TrelloPowerUp.iframe();\n        log = await t.get(scope, visibility, key);\n        type = t.arg('type');\n\n    } else {\n        type = trelloEnums.Type.Challenge;\n    }\n\n    const challengeLog = new ChallengeLog(type);\n\n    const reasons = type === trelloEnums.Type.Challenge\n        ? sources.data.find(s => s.selected).reasons.negative\n        : sources.data.find(s => s.selected).reasons.positive;\n\n    if(log && log !== undefined) {\n        const updatedLogFromTrello = challengeLog.setLog(log);\n    }\n\n    const showSelectedPledges = (pledges, currentPledge) => {\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n            \n            pledges.forEach(pledge => {\n                if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                }\n            });\n\n            if (parseInt(currentPledge.id) === parseInt(btn.id)) {\n                btn.classList.add('selected');\n            }\n        });\n    };\n\n    const clickPledgeHandler = (e, pledgeId) => {\n        \n        const context = isLive ? t.getContext() : {\n            board: 'board #1',\n            member: 'member #1',\n            card: 'card #1',\n        };\n\n        const pledge = pledges.find(p => parseInt(p.id) === parseInt(pledgeId));\n\n        const { isPledgeNowLogged, updatedPledges } = challengeLog.togglePledge(context, pledge);\n\n        showSelectedPledges(updatedPledges, pledge);\n        redrawChallengeReasons();\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    const showSelectedReasons = reasons => {\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n\n            btn.classList.remove('selected');\n\n            if(reasons === []) return;\n\n            reasons.forEach(reason => {\n                if (parseInt(reason.id) === parseInt(btn.id)) {\n                    btn.classList.add('selected');\n                } else {\n                    if (reasons.filter(sb => parseInt(sb.id) === parseInt(btn.id)) === []) {\n                        btn.classList.remove('selected');\n                    }\n                }\n            });\n        });\n    };\n\n    const clickReasonHandler = (e, reasonId) => {\n\n        const reason = reasons.find(r => parseInt(r.id) === parseInt(reasonId));\n\n        const { isReasonNowLogged, updatedReasons } = challengeLog.toggleReason(reason);\n\n        showSelectedReasons(updatedReasons);\n\n        redrawChallengePledges();\n    };\n\n    const redrawChallengePledges = () => {\n\n        const pledgeItems = pledges.map(pledge => {\n        \n            const reasonCount = challengeLog.getReasonsCountByPledge(pledge.id);\n\n            const classList = type === trelloEnums.Type.Challenge ? 'btnChallenge' : 'btnCelebrate';\n\n            return `<li>\n                        <button id=\"${pledge.id}\" class=\"btn ${classList}\">${pledge.text}<span class=\"counter\">${reasonCount}</span></button>\n                    </li>`;\n        });\n\n        pledgesContainer.innerHTML = pledgeItems.join('');\n\n        pledgesContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickPledgeHandler(e, btn.id));\n        });\n\n        showSelectedPledges(challengeLog.getLoggedPledges(), challengeLog.getCurrentPledge());\n    };\n\n    redrawChallengePledges();\n\n    const redrawChallengeReasons = () => {\n\n        const reasonItems = reasons.map(reason => {\n            return `<li>\n                        <button id=\"${reason.id}\" class=\"btn btnReason\">${reason.text}</button>\n                    </li>`;\n        });\n        \n        reasonsContainer.innerHTML = reasonItems.join('');\n\n        reasonsContainer.querySelectorAll('.btn').forEach(btn => {\n            btn.addEventListener('click', e => clickReasonHandler(e, btn.id));\n        });\n\n        showSelectedReasons(challengeLog.getReasonsForCurrentPledge());\n    };\n\n    redrawChallengeReasons();\n\n    const submitButton = document.getElementById('submit');\n\n    submitButton.addEventListener('click', async e => {\n\n        if(!isLive) return;\n        \n        const value = challengeLog.getLog();\n\n        await t.set(scope, visibility, key, value);\n\n        const response = await t.get(scope, visibility, key);\n\n        await t.notifyParent('done');\n\n        return t.closeModal();\n\n    });\n};\n\ninit();\n"],"names":["$3d7d3746cdb0bc86$exports","JSON","parse","$c44f457c0fe3a57f$export$2e2bcd8739ae039","Object","freeze","Board","Member","Card","Organization","Challenge","Celebrate","Shared","Private","LogEntries","ChallengePreferences","BoardButtons","CardBadges","CardButtons","CardDetailBadges","CardBackSection","Admin","Edit","ReadOnly","SignedIn","SignedOut","Always","Label","Popup","Modal","$976c36581cb476c9$export$2e2bcd8739ae039","type","Type","this","log","currentPledge","context","currentReason","islogTruthy","val","entries","length","islogFalsy","val1","isLogEmpty","getLog","setLog","setType","type1","getCurrentPledge","addPledgeToLog","pledge","board","member","card","id","text","reasons","push","isPledgeNowLogged","updatedPledges","filter","entry","removePledgeFromLog","getReasonsForCurrentPledge","map","togglePledge","isPledgeLogged","find","parseInt","getLoggedPledges","undefined","addReasonToPledge","updatedReasons","isReasonNowLogged","removeReasonFromPledge","r","toggleReason","reason","isReasonLogged","getReasonsCount","entry1","reasonCount","toString","getReasonsCountByPledge","pledgeId","entry2","type2","count","context1","log1","challenges","celebrations","Set","e","context2","log2","label","context3","log3","async","isLive","document","referrer","pledges1","$parcel$interopDefault","data","s","selected","pledges","pledgesContainer","getElementById","reasonsContainer","href","src","scope","Scope","visibility","Visibility","key","Key","Capability","t","window","TrelloPowerUp","iframe","get","arg","challengeLog","reasons1","negative","positive","showSelectedPledges","querySelectorAll","forEach","btn","classList","remove","add","showSelectedReasons","sb","redrawChallengePledges","pledgeItems","innerHTML","join","addEventListener","getContext","p","redrawChallengeReasons","clickPledgeHandler","reasonItems","reasonId","clickReasonHandler","value","set","notifyParent"],"version":3,"file":"challenge.c2770fa7.js.map"}